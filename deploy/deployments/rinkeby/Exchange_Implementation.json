{
  "address": "0xB4B5c608Ed491e5445185d555f05ee0e8e1cC5A2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LibAsset.AssetType",
          "name": "makeAssetType",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LibAsset.AssetType",
          "name": "takeAssetType",
          "type": "tuple"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "leftHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rightHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "leftMaker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rightMaker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLeftFill",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRightFill",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LibAsset.AssetType",
          "name": "leftAsset",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LibAsset.AssetType",
          "name": "rightAsset",
          "type": "tuple"
        }
      ],
      "name": "Match",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "assetType",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "matcher",
          "type": "address"
        }
      ],
      "name": "MatcherChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "assetType",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "ProxyChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "assetClass",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LibAsset.AssetType",
              "name": "assetType",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct LibAsset.Asset",
          "name": "asset",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "transferDirection",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "transferType",
          "type": "bytes4"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract INftTransferProxy",
          "name": "_transferProxy",
          "type": "address"
        },
        {
          "internalType": "contract IERC20TransferProxy",
          "name": "_erc20TransferProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newProtocolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newDefaultFeeReceiver",
          "type": "address"
        },
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "newRoyaltiesProvider",
          "type": "address"
        }
      ],
      "name": "__Exchange_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "dataType",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibOrder.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeReceivers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "fills",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "dataType",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibOrder.Order",
          "name": "orderLeft",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signatureLeft",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "dataType",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibOrder.Order",
          "name": "orderRight",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signatureRight",
          "type": "bytes"
        }
      ],
      "name": "matchOrders",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesRegistry",
      "outputs": [
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "assetType",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "matcher",
          "type": "address"
        }
      ],
      "name": "setAssetMatcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newDefaultFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setDefaultFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newProtocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "newRoyaltiesRegistry",
          "type": "address"
        }
      ],
      "name": "setRoyaltiesRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "assetType",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "setTransferProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd4339407f48578b7dc36f8ae15f59a1f5936d794b5e70637def0a8889bec3edf",
  "receipt": {
    "to": null,
    "from": "0xD4f849989B403326F7d000bb30E6dd0016bae9b3",
    "contractAddress": "0xB4B5c608Ed491e5445185d555f05ee0e8e1cC5A2",
    "transactionIndex": 31,
    "gasUsed": "4705900",
    "logsBloom": "0x
    "blockHash": "0xe4d37cc94767be02ea3d03d9b7e264e2bfe2a65769904f1c37690288742829bb",
    "transactionHash": "0xd4339407f48578b7dc36f8ae15f59a1f5936d794b5e70637def0a8889bec3edf",
    "logs": [],
    "blockNumber": 10217370,
    "cumulativeGasUsed": "12708001",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5984c7f03812587892acb97832768254",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"makeAssetType\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"takeAssetType\",\"type\":\"tuple\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"leftHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rightHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"leftMaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rightMaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLeftFill\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRightFill\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"leftAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"rightAsset\",\"type\":\"tuple\"}],\"name\":\"Match\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"matcher\",\"type\":\"address\"}],\"name\":\"MatcherChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"transferDirection\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"transferType\",\"type\":\"bytes4\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract INftTransferProxy\",\"name\":\"_transferProxy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TransferProxy\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesProvider\",\"type\":\"address\"}],\"name\":\"__Exchange_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReceivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderLeft\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureLeft\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderRight\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureRight\",\"type\":\"bytes\"}],\"name\":\"matchOrders\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesRegistry\",\"outputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"matcher\",\"type\":\"address\"}],\"name\":\"setAssetMatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"}],\"name\":\"setDefaultFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesRegistry\",\"type\":\"address\"}],\"name\":\"setRoyaltiesRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"setTransferProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sipher/exchange-v2/contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":22000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6cd0bc8c149150614ca3d4a3d3d21f844a0ab3032625f34fcfcf1c2c8b351638\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x8bc67f00476dee73f70cf8218e72523033c279b601ea38d0b83c227ccddb639a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xcbc02d192c55298cf65e5695375c839eac979a597a0fbdc1635195c4d28ca5ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@sipher/exchange-interfaces/contracts/IAssetMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@sipher/lib-asset/contracts/LibAsset.sol\\\";\\n\\ninterface IAssetMatcher {\\n    function matchAssets(\\n        LibAsset.AssetType memory leftAssetType,\\n        LibAsset.AssetType memory rightAssetType\\n    ) external view returns (LibAsset.AssetType memory);\\n}\\n\",\"keccak256\":\"0x6640d85c1191e8adb8e56e947c5a3be42721afeb117f633be19fc836a6ea8366\",\"license\":\"MIT\"},\"@sipher/exchange-interfaces/contracts/IERC20TransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20TransferProxy {\\n    function erc20safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x5cc1d6300618f13724624bbdd1b4447d1f149dc7cc3b75497e03110f798d9547\",\"license\":\"MIT\"},\"@sipher/exchange-interfaces/contracts/INftTransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface INftTransferProxy {\\n    function erc721safeTransferFrom(IERC721Upgradeable token, address from, address to, uint256 tokenId) external;\\n\\n    function erc1155safeTransferFrom(IERC1155Upgradeable token, address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x43093ee21a43fb70eb06b5e886ea48308fa689765e370297de52d71d4f7ab5cf\",\"license\":\"MIT\"},\"@sipher/exchange-interfaces/contracts/ITransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@sipher/lib-asset/contracts/LibAsset.sol\\\";\\n\\ninterface ITransferProxy {\\n    function transfer(LibAsset.Asset calldata asset, address from, address to) external;\\n}\\n\",\"keccak256\":\"0x5f43b20075ecba13ea5644d745d703146a40e1ab7bb4430d7de1d585544a3d39\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/AssetMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@sipher/exchange-interfaces/contracts/IAssetMatcher.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract AssetMatcher is Initializable, OwnableUpgradeable {\\n\\n    bytes constant EMPTY = \\\"\\\";\\n    mapping(bytes4 => address) matchers;\\n\\n    event MatcherChange(bytes4 indexed assetType, address matcher);\\n\\n    function setAssetMatcher(bytes4 assetType, address matcher) external onlyOwner {\\n        matchers[assetType] = matcher;\\n        emit MatcherChange(assetType, matcher);\\n    }\\n\\n    function matchAssets(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) internal view returns (LibAsset.AssetType memory) {\\n        LibAsset.AssetType memory result = matchAssetOneSide(leftAssetType, rightAssetType);\\n        if (result.assetClass == 0) {\\n            return matchAssetOneSide(rightAssetType, leftAssetType);\\n        } else {\\n            return result;\\n        }\\n    }\\n\\n    function matchAssetOneSide(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) private view returns (LibAsset.AssetType memory) {\\n        bytes4 classLeft = leftAssetType.assetClass;\\n        bytes4 classRight = rightAssetType.assetClass;\\n        if (classLeft == LibAsset.ETH_ASSET_CLASS) {\\n            if (classRight == LibAsset.ETH_ASSET_CLASS) {\\n                return leftAssetType;\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC20_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC20_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC721_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC721_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC1155_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC1155_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        address matcher = matchers[classLeft];\\n        if (matcher != address(0)) {\\n            return IAssetMatcher(matcher).matchAssets(leftAssetType, rightAssetType);\\n        }\\n        if (classLeft == classRight) {\\n            return simpleMatch(leftAssetType, rightAssetType);\\n        }\\n        revert(\\\"not found IAssetMatcher\\\");\\n    }\\n\\n    function simpleMatch(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) private view returns (LibAsset.AssetType memory) {\\n        bytes32 leftHash = keccak256(leftAssetType.data);\\n        bytes32 rightHash = keccak256(rightAssetType.data);\\n        if (leftHash == rightHash) {\\n            return leftAssetType;\\n        }\\n        return LibAsset.AssetType(0, EMPTY);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x846e33e3c95b2ab316c8a8dd858995d4e44d98f27f9280e7c4dacd6e81d71075\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./ExchangeCore.sol\\\";\\nimport \\\"./SipherTransferManager.sol\\\";\\nimport \\\"@sipher/royalties/contracts/IRoyaltiesProvider.sol\\\";\\n\\ncontract Exchange is ExchangeCore, SipherTransferManager {\\n    function __Exchange_init(\\n        INftTransferProxy _transferProxy,\\n        IERC20TransferProxy _erc20TransferProxy,\\n        uint newProtocolFee,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __TransferExecutor_init_unchained(_transferProxy, _erc20TransferProxy);\\n        __SipherTransferManager_init_unchained(newProtocolFee, newDefaultFeeReceiver, newRoyaltiesProvider);\\n        __OrderValidator_init_unchained();\\n    }\\n}\",\"keccak256\":\"0x15cb29a956c599979324eff5fab6014bf3607785bba1b24aed00ccc02881bfee\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/ExchangeCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LibFill.sol\\\";\\nimport \\\"./LibOrder.sol\\\";\\nimport \\\"./OrderValidator.sol\\\";\\nimport \\\"./AssetMatcher.sol\\\";\\nimport \\\"./TransferExecutor.sol\\\";\\nimport \\\"./ITransferManager.sol\\\";\\nimport \\\"./lib/LibTransfer.sol\\\";\\n\\nabstract contract ExchangeCore is Initializable, OwnableUpgradeable, AssetMatcher, TransferExecutor, OrderValidator, ITransferManager {\\n    using SafeMathUpgradeable for uint;\\n    using LibTransfer for address;\\n\\n    uint256 private constant UINT256_MAX = 2 ** 256 - 1;\\n\\n    //state of the orders\\n    mapping(bytes32 => uint) public fills;\\n\\n    //events\\n    event Cancel(bytes32 hash, address maker, LibAsset.AssetType makeAssetType, LibAsset.AssetType takeAssetType);\\n    event Match(bytes32 leftHash, bytes32 rightHash, address leftMaker, address rightMaker, uint newLeftFill, uint newRightFill, LibAsset.AssetType leftAsset, LibAsset.AssetType rightAsset);\\n\\n    function cancel(LibOrder.Order memory order) external {\\n        require(_msgSender() == order.maker, \\\"not a maker\\\");\\n        require(order.salt != 0, \\\"0 salt can't be used\\\");\\n        bytes32 orderKeyHash = LibOrder.hashKey(order);\\n        fills[orderKeyHash] = UINT256_MAX;\\n        emit Cancel(orderKeyHash, order.maker, order.makeAsset.assetType, order.takeAsset.assetType);\\n    }\\n\\n    function matchOrders(\\n        LibOrder.Order memory orderLeft,\\n        bytes memory signatureLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes memory signatureRight\\n    ) external payable {\\n        validateFull(orderLeft, signatureLeft);\\n        validateFull(orderRight, signatureRight);\\n        if (orderLeft.taker != address(0)) {\\n            require(orderRight.maker == orderLeft.taker, \\\"leftOrder.taker verification failed\\\");\\n        }\\n        if (orderRight.taker != address(0)) {\\n            require(orderRight.taker == orderLeft.maker, \\\"rightOrder.taker verification failed\\\");\\n        }\\n        matchAndTransfer(orderLeft, orderRight);\\n    }\\n\\n    function matchAndTransfer(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight) internal {\\n        (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) = matchAssets(orderLeft, orderRight);\\n        bytes32 leftOrderKeyHash = LibOrder.hashKey(orderLeft);\\n        bytes32 rightOrderKeyHash = LibOrder.hashKey(orderRight);\\n\\n        LibOrderDataV2.DataV2 memory leftOrderData = LibOrderData.parse(orderLeft);\\n        LibOrderDataV2.DataV2 memory rightOrderData = LibOrderData.parse(orderRight);\\n\\n        LibFill.FillResult memory newFill = getFillSetNew(orderLeft, orderRight, leftOrderKeyHash, rightOrderKeyHash, leftOrderData, rightOrderData);\\n\\n        (uint totalMakeValue, uint totalTakeValue) = doTransfers(makeMatch, takeMatch, newFill, orderLeft, orderRight, leftOrderData, rightOrderData);\\n        if (makeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            require(takeMatch.assetClass != LibAsset.ETH_ASSET_CLASS);\\n            require(msg.value >= totalMakeValue, \\\"not enough eth\\\");\\n            if (msg.value > totalMakeValue) {\\n                address(msg.sender).transferEth(msg.value.sub(totalMakeValue));\\n            }\\n        } else if (takeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            require(msg.value >= totalTakeValue, \\\"not enough eth\\\");\\n            if (msg.value > totalTakeValue) {\\n                address(msg.sender).transferEth(msg.value.sub(totalTakeValue));\\n            }\\n        }\\n        emit Match(leftOrderKeyHash, rightOrderKeyHash, orderLeft.maker, orderRight.maker, newFill.rightValue, newFill.leftValue, makeMatch, takeMatch);\\n    }\\n\\n    function getFillSetNew(\\n        LibOrder.Order memory orderLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes32 leftOrderKeyHash,\\n        bytes32 rightOrderKeyHash,\\n        LibOrderDataV2.DataV2 memory leftOrderData,\\n        LibOrderDataV2.DataV2 memory rightOrderData\\n    ) internal returns (LibFill.FillResult memory) {\\n        uint leftOrderFill = getOrderFill(orderLeft, leftOrderKeyHash);\\n        uint rightOrderFill = getOrderFill(orderRight, rightOrderKeyHash);\\n        LibFill.FillResult memory newFill = LibFill.fillOrder(orderLeft, orderRight, leftOrderFill, rightOrderFill, leftOrderData.isMakeFill, rightOrderData.isMakeFill);\\n\\n        require(newFill.rightValue > 0 && newFill.leftValue > 0, \\\"nothing to fill\\\");\\n\\n        if (orderLeft.salt != 0) {\\n            if (leftOrderData.isMakeFill) {\\n                fills[leftOrderKeyHash] = leftOrderFill.add(newFill.leftValue);\\n            } else {\\n                fills[leftOrderKeyHash] = leftOrderFill.add(newFill.rightValue);\\n            }\\n        }\\n\\n        if (orderRight.salt != 0) {\\n            if (rightOrderData.isMakeFill) {\\n                fills[rightOrderKeyHash] = rightOrderFill.add(newFill.rightValue);\\n            } else {\\n                fills[rightOrderKeyHash] = rightOrderFill.add(newFill.leftValue);\\n            }\\n        }\\n        return newFill;\\n    }\\n\\n    function getOrderFill(LibOrder.Order memory order, bytes32 hash) internal view returns (uint fill) {\\n        if (order.salt == 0) {\\n            fill = 0;\\n        } else {\\n            fill = fills[hash];\\n        }\\n    }\\n\\n    function matchAssets(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight) internal view returns (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) {\\n        makeMatch = matchAssets(orderLeft.makeAsset.assetType, orderRight.takeAsset.assetType);\\n        require(makeMatch.assetClass != 0, \\\"assets don't match\\\");\\n        takeMatch = matchAssets(orderLeft.takeAsset.assetType, orderRight.makeAsset.assetType);\\n        require(takeMatch.assetClass != 0, \\\"assets don't match\\\");\\n    }\\n\\n    function validateFull(LibOrder.Order memory order, bytes memory signature) internal view {\\n        LibOrder.validate(order);\\n        validate(order, signature);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x6a8f7dd66145a944d6b5e7224b20f841f3a06f58fc390e5440ff06fc952ed156\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/ITransferExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@sipher/lib-asset/contracts/LibAsset.sol\\\";\\n\\nabstract contract ITransferExecutor {\\n\\n    //events\\n    event Transfer(LibAsset.Asset asset, address from, address to, bytes4 transferDirection, bytes4 transferType);\\n\\n    function transfer(\\n        LibAsset.Asset memory asset,\\n        address from,\\n        address to,\\n        bytes4 transferDirection,\\n        bytes4 transferType\\n    ) internal virtual;\\n\\n}\\n\",\"keccak256\":\"0xe196f03ce96d61f27d9c9553408277d2701bb2f4b7e12e047857c99d562ca037\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/ITransferManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@sipher/lib-asset/contracts/LibAsset.sol\\\";\\nimport \\\"./LibFill.sol\\\";\\nimport \\\"./TransferExecutor.sol\\\";\\nimport \\\"./LibOrderData.sol\\\";\\n\\nabstract contract ITransferManager is ITransferExecutor {\\n    bytes4 constant TO_MAKER = bytes4(keccak256(\\\"TO_MAKER\\\"));\\n    bytes4 constant TO_TAKER = bytes4(keccak256(\\\"TO_TAKER\\\"));\\n    bytes4 constant PROTOCOL = bytes4(keccak256(\\\"PROTOCOL\\\"));\\n    bytes4 constant ROYALTY = bytes4(keccak256(\\\"ROYALTY\\\"));\\n    bytes4 constant ORIGIN = bytes4(keccak256(\\\"ORIGIN\\\"));\\n    bytes4 constant PAYOUT = bytes4(keccak256(\\\"PAYOUT\\\"));\\n\\n    function doTransfers(\\n        LibAsset.AssetType memory makeMatch,\\n        LibAsset.AssetType memory takeMatch,\\n        LibFill.FillResult memory fill,\\n        LibOrder.Order memory leftOrder,\\n        LibOrder.Order memory rightOrder,\\n        LibOrderDataV2.DataV2 memory leftOrderData,\\n        LibOrderDataV2.DataV2 memory rightOrderData\\n    ) internal virtual returns (uint totalMakeValue, uint totalTakeValue);\\n}\\n\",\"keccak256\":\"0xe0b3e6c162ca77a52880c5220077e338959dff351670657adfd80a0613311a39\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/LibFeeSide.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@sipher/lib-asset/contracts/LibAsset.sol\\\";\\n\\nlibrary LibFeeSide {\\n\\n    enum FeeSide {NONE, MAKE, TAKE}\\n\\n    function getFeeSide(bytes4 make, bytes4 take) internal pure returns (FeeSide) {\\n        if (make == LibAsset.ETH_ASSET_CLASS) {\\n            return FeeSide.MAKE;\\n        }\\n        if (take == LibAsset.ETH_ASSET_CLASS) {\\n            return FeeSide.TAKE;\\n        }\\n        if (make == LibAsset.ERC20_ASSET_CLASS) {\\n            return FeeSide.MAKE;\\n        }\\n        if (take == LibAsset.ERC20_ASSET_CLASS) {\\n            return FeeSide.TAKE;\\n        }\\n        if (make == LibAsset.ERC1155_ASSET_CLASS) {\\n            return FeeSide.MAKE;\\n        }\\n        if (take == LibAsset.ERC1155_ASSET_CLASS) {\\n            return FeeSide.TAKE;\\n        }\\n        return FeeSide.NONE;\\n    }\\n}\\n\",\"keccak256\":\"0x179c15864d0d6215518f804c427caf5e54b25a0a276e3fe2f03f3dd7ddb5c302\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/LibFill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./LibOrder.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\n\\nlibrary LibFill {\\n    using SafeMathUpgradeable for uint;\\n\\n    struct FillResult {\\n        uint leftValue;\\n        uint rightValue;\\n    }\\n\\n    /**\\n     * @dev Should return filled values\\n     * @param leftOrder left order\\n     * @param rightOrder right order\\n     * @param leftOrderFill current fill of the left order (0 if order is unfilled)\\n     * @param rightOrderFill current fill of the right order (0 if order is unfilled)\\n     * @param leftIsMakeFill true if left orders fill is calculated from the make side, false if from the take side\\n     * @param rightIsMakeFill true if right orders fill is calculated from the make side, false if from the take side\\n     */\\n    function fillOrder(LibOrder.Order memory leftOrder, LibOrder.Order memory rightOrder, uint leftOrderFill, uint rightOrderFill, bool leftIsMakeFill, bool rightIsMakeFill) internal pure returns (FillResult memory) {\\n        (uint leftMakeValue, uint leftTakeValue) = LibOrder.calculateRemaining(leftOrder, leftOrderFill, leftIsMakeFill);\\n        (uint rightMakeValue, uint rightTakeValue) = LibOrder.calculateRemaining(rightOrder, rightOrderFill, rightIsMakeFill);\\n\\n        //We have 3 cases here:\\n        if (rightTakeValue > leftMakeValue) { //1nd: left order should be fully filled\\n            return fillLeft(leftMakeValue, leftTakeValue, rightOrder.makeAsset.value, rightOrder.takeAsset.value);\\n        }//2st: right order should be fully filled or 3d: both should be fully filled if required values are the same\\n        return fillRight(leftOrder.makeAsset.value, leftOrder.takeAsset.value, rightMakeValue, rightTakeValue);\\n    }\\n\\n    function fillRight(uint leftMakeValue, uint leftTakeValue, uint rightMakeValue, uint rightTakeValue) internal pure returns (FillResult memory result) {\\n        uint makerValue = LibMath.safeGetPartialAmountFloor(rightTakeValue, leftMakeValue, leftTakeValue);\\n        require(makerValue <= rightMakeValue, \\\"fillRight: unable to fill\\\");\\n        return FillResult(rightTakeValue, makerValue);\\n    }\\n\\n    function fillLeft(uint leftMakeValue, uint leftTakeValue, uint rightMakeValue, uint rightTakeValue) internal pure returns (FillResult memory result) {\\n        uint rightTake = LibMath.safeGetPartialAmountFloor(leftTakeValue, rightMakeValue, rightTakeValue);\\n        require(rightTake <= leftMakeValue, \\\"fillLeft: unable to fill\\\");\\n        return FillResult(leftMakeValue, leftTakeValue);\\n    }\\n}\\n\",\"keccak256\":\"0xc2709d5c9b49af6c7ed1dc5ff5730eddd72b074d40fd1b1aa01c3b5d737c183c\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/LibOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./lib/LibMath.sol\\\";\\nimport \\\"@sipher/lib-asset/contracts/LibAsset.sol\\\";\\nimport \\\"./LibOrderDataV2.sol\\\";\\n\\nlibrary LibOrder {\\n    using SafeMathUpgradeable for uint;\\n\\n    bytes32 constant ORDER_TYPEHASH = keccak256(\\n        \\\"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end,bytes4 dataType,bytes data)Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    struct Order {\\n        address maker;\\n        LibAsset.Asset makeAsset;\\n        address taker;\\n        LibAsset.Asset takeAsset;\\n        uint salt;\\n        uint start;\\n        uint end;\\n        bytes4 dataType;\\n        bytes data;\\n    }\\n\\n    function calculateRemaining(Order memory order, uint fill, bool isMakeFill) internal pure returns (uint makeValue, uint takeValue) {\\n        if (isMakeFill){\\n            makeValue = order.makeAsset.value.sub(fill);\\n            takeValue = LibMath.safeGetPartialAmountFloor(order.takeAsset.value, order.makeAsset.value, makeValue);\\n        } else {\\n            takeValue = order.takeAsset.value.sub(fill);\\n            makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue); \\n        } \\n    }\\n\\n    function hashKey(Order memory order) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            order.maker,\\n            LibAsset.hash(order.makeAsset.assetType),\\n            LibAsset.hash(order.takeAsset.assetType),\\n            order.salt,\\n            order.data\\n        ));\\n    }\\n\\n    function hash(Order memory order) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ORDER_TYPEHASH,\\n                order.maker,\\n                LibAsset.hash(order.makeAsset),\\n                order.taker,\\n                LibAsset.hash(order.takeAsset),\\n                order.salt,\\n                order.start,\\n                order.end,\\n                order.dataType,\\n                keccak256(order.data)\\n            ));\\n    }\\n\\n    function validate(LibOrder.Order memory order) internal view {\\n        require(order.start == 0 || order.start < block.timestamp, \\\"Order start validation failed\\\");\\n        require(order.end == 0 || order.end > block.timestamp, \\\"Order end validation failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1051759d12a06fc3ddde8ed75e02e013f478070a66611e549fe50cea8e179821\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/LibOrderData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./LibOrder.sol\\\";\\n\\nlibrary LibOrderData {\\n    function parse(LibOrder.Order memory order) pure internal returns (LibOrderDataV2.DataV2 memory dataOrder) {\\n        if (order.dataType == LibOrderDataV2.V2) {\\n            dataOrder = LibOrderDataV2.decodeOrderDataV2(order.data);\\n        } else if (order.dataType == 0xffffffff) {\\n        } else {\\n            revert(\\\"Unknown Order data type\\\");\\n        }\\n        if (dataOrder.payouts.length == 0) {\\n            dataOrder.payouts = payoutSet(order.maker);\\n        }\\n    }\\n\\n    function payoutSet(address orderAddress) pure internal returns (LibPart.Part[] memory) {\\n        LibPart.Part[] memory payout = new LibPart.Part[](1);\\n        payout[0].account = payable(orderAddress);\\n        payout[0].value = 10000;\\n        return payout;\\n    }\\n}\\n\",\"keccak256\":\"0xb5ee179a03f8d4e551849676ee323b8ab9fea63e464324d9043d0afe269d8466\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/LibOrderDataV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@sipher/royalties/contracts/LibPart.sol\\\";\\n\\nlibrary LibOrderDataV2 {\\n    bytes4 constant public V2 = bytes4(keccak256(\\\"V2\\\"));\\n\\n    struct DataV2 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        bool isMakeFill;\\n    }\\n\\n    function decodeOrderDataV2(bytes memory data) internal pure returns (DataV2 memory orderData) {\\n        orderData = abi.decode(data, (DataV2));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x015b7581eed618e80c973f2d23ba014c72b80e39710c8acbaf7c47ae5c72a524\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/OrderValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./interfaces/IERC1271.sol\\\";\\nimport \\\"./LibOrder.sol\\\";\\nimport \\\"@sipher/libraries/contracts/LibSignature.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\\\";\\n\\nabstract contract OrderValidator is\\n    Initializable,\\n    ContextUpgradeable,\\n    EIP712Upgradeable\\n{\\n    using LibSignature for bytes32;\\n    using AddressUpgradeable for address;\\n\\n    bytes4 internal constant MAGICVALUE = 0x1626ba7e;\\n\\n    function __OrderValidator_init_unchained() internal initializer {\\n        __EIP712_init_unchained(\\\"Exchange\\\", \\\"2\\\");\\n    }\\n\\n    function validate(LibOrder.Order memory order, bytes memory signature)\\n        internal\\n        view\\n    {\\n        if (order.salt == 0) {\\n            if (order.maker != address(0)) {\\n                require(_msgSender() == order.maker, \\\"maker is not tx sender\\\");\\n            } else {\\n                order.maker = _msgSender();\\n            }\\n        } else {\\n            if (_msgSender() != order.maker) {\\n                bytes32 hash = LibOrder.hash(order);\\n                address signer;\\n                if (signature.length == 65) {\\n                    signer = _hashTypedDataV4(hash).recover(signature);\\n                }\\n                if (signer != order.maker) {\\n                    if (order.maker.isContract()) {\\n                        require(\\n                            IERC1271(order.maker).isValidSignature(\\n                                _hashTypedDataV4(hash),\\n                                signature\\n                            ) == MAGICVALUE,\\n                            \\\"contract order signature verification error\\\"\\n                        );\\n                    } else {\\n                        revert(\\\"order signature verification error\\\");\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe70175989e725465afa6f8b81f8b4e88cba0cbbc649cf02dfdeaf8ff8965b25b\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/SipherTransferManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@sipher/lib-asset/contracts/LibAsset.sol\\\";\\nimport \\\"@sipher/royalties/contracts/IRoyaltiesProvider.sol\\\";\\nimport \\\"@sipher/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\\\";\\nimport \\\"@sipher/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\\\";\\nimport \\\"./LibFill.sol\\\";\\nimport \\\"./LibFeeSide.sol\\\";\\nimport \\\"./ITransferManager.sol\\\";\\nimport \\\"./TransferExecutor.sol\\\";\\nimport \\\"./lib/BpLibrary.sol\\\";\\n\\nabstract contract SipherTransferManager is OwnableUpgradeable, ITransferManager {\\n    using BpLibrary for uint;\\n    using SafeMathUpgradeable for uint;\\n\\n    uint public protocolFee;\\n    IRoyaltiesProvider public royaltiesRegistry;\\n\\n    address public defaultFeeReceiver;\\n    mapping(address => address) public feeReceivers;\\n\\n    function __SipherTransferManager_init_unchained(\\n        uint newProtocolFee,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) internal initializer {\\n        protocolFee = newProtocolFee;\\n        defaultFeeReceiver = newDefaultFeeReceiver;\\n        royaltiesRegistry = newRoyaltiesProvider;\\n    }\\n\\n    function setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) external onlyOwner {\\n        royaltiesRegistry = newRoyaltiesRegistry;\\n    }\\n\\n    function setProtocolFee(uint newProtocolFee) external onlyOwner {\\n        protocolFee = newProtocolFee;\\n    }\\n\\n    function setDefaultFeeReceiver(address payable newDefaultFeeReceiver) external onlyOwner {\\n        defaultFeeReceiver = newDefaultFeeReceiver;\\n    }\\n\\n    function setFeeReceiver(address token, address wallet) external onlyOwner {\\n        feeReceivers[token] = wallet;\\n    }\\n\\n    function getFeeReceiver(address token) internal view returns (address) {\\n        address wallet = feeReceivers[token];\\n        if (wallet != address(0)) {\\n            return wallet;\\n        }\\n        return defaultFeeReceiver;\\n    }\\n\\n    function doTransfers(\\n        LibAsset.AssetType memory makeMatch,\\n        LibAsset.AssetType memory takeMatch,\\n        LibFill.FillResult memory fill,\\n        LibOrder.Order memory leftOrder,\\n        LibOrder.Order memory rightOrder,\\n        LibOrderDataV2.DataV2 memory leftOrderData,\\n        LibOrderDataV2.DataV2 memory rightOrderData\\n    ) override internal returns (uint totalMakeValue, uint totalTakeValue) {\\n        LibFeeSide.FeeSide feeSide = LibFeeSide.getFeeSide(makeMatch.assetClass, takeMatch.assetClass);\\n        totalMakeValue = fill.leftValue;\\n        totalTakeValue = fill.rightValue;\\n        if (feeSide == LibFeeSide.FeeSide.MAKE) {\\n            totalMakeValue = doTransfersWithFees(fill.leftValue, leftOrder.maker, leftOrderData, rightOrderData, makeMatch, takeMatch,  TO_TAKER);\\n            transferPayouts(takeMatch, fill.rightValue, rightOrder.maker, leftOrderData.payouts, TO_MAKER);\\n        } else if (feeSide == LibFeeSide.FeeSide.TAKE) {\\n            totalTakeValue = doTransfersWithFees(fill.rightValue, rightOrder.maker, rightOrderData, leftOrderData, takeMatch, makeMatch, TO_MAKER);\\n            transferPayouts(makeMatch, fill.leftValue, leftOrder.maker, rightOrderData.payouts, TO_TAKER);\\n        } else {\\n            transferPayouts(makeMatch, fill.leftValue, leftOrder.maker, rightOrderData.payouts, TO_TAKER);\\n            transferPayouts(takeMatch, fill.rightValue, rightOrder.maker, leftOrderData.payouts, TO_MAKER);\\n        }\\n    }\\n\\n    function doTransfersWithFees(\\n        uint amount,\\n        address from,\\n        LibOrderDataV2.DataV2 memory dataCalculate,\\n        LibOrderDataV2.DataV2 memory dataNft,\\n        LibAsset.AssetType memory matchCalculate,\\n        LibAsset.AssetType memory matchNft,\\n        bytes4 transferDirection\\n    ) internal returns (uint totalAmount) {\\n        totalAmount = calculateTotalAmount(amount, protocolFee, dataCalculate.originFees);\\n        uint rest = transferProtocolFee(totalAmount, amount, from, matchCalculate, transferDirection);\\n        rest = transferRoyalties(matchCalculate, matchNft, rest, amount, from, transferDirection);\\n        (rest,) = transferFees(matchCalculate, rest, amount, dataCalculate.originFees, from, transferDirection, ORIGIN);\\n        (rest,) = transferFees(matchCalculate, rest, amount, dataNft.originFees, from, transferDirection, ORIGIN);\\n        transferPayouts(matchCalculate, rest, from, dataNft.payouts, transferDirection);\\n    }\\n\\n    function transferProtocolFee(\\n        uint totalAmount,\\n        uint amount,\\n        address from,\\n        LibAsset.AssetType memory matchCalculate,\\n        bytes4 transferDirection\\n    ) internal returns (uint) {\\n        (uint rest, uint fee) = subFeeInBp(totalAmount, amount, protocolFee.mul(2));\\n        if (fee > 0) {\\n            address tokenAddress = address(0);\\n            if (matchCalculate.assetClass == LibAsset.ERC20_ASSET_CLASS) {\\n                tokenAddress = abi.decode(matchCalculate.data, (address));\\n            } else  if (matchCalculate.assetClass == LibAsset.ERC1155_ASSET_CLASS) {\\n                uint tokenId;\\n                (tokenAddress, tokenId) = abi.decode(matchCalculate.data, (address, uint));\\n            }\\n            transfer(LibAsset.Asset(matchCalculate, fee), from, getFeeReceiver(tokenAddress), transferDirection, PROTOCOL);\\n        }\\n        return rest;\\n    }\\n\\n    function transferRoyalties(\\n        LibAsset.AssetType memory matchCalculate,\\n        LibAsset.AssetType memory matchNft,\\n        uint rest,\\n        uint amount,\\n        address from,\\n        bytes4 transferDirection\\n    ) internal returns (uint) {\\n        LibPart.Part[] memory fees = getRoyaltiesByAssetType(matchNft);\\n\\n        (uint result, uint totalRoyalties) = transferFees(matchCalculate, rest, amount, fees, from, transferDirection, ROYALTY);\\n        require(totalRoyalties <= 5000, \\\"Royalties are too high (>50%)\\\");\\n        return result;\\n    }\\n\\n    function getRoyaltiesByAssetType(LibAsset.AssetType memory matchNft) internal returns (LibPart.Part[] memory) {\\n        if (matchNft.assetClass == LibAsset.ERC1155_ASSET_CLASS || matchNft.assetClass == LibAsset.ERC721_ASSET_CLASS) {\\n            (address token, uint tokenId) = abi.decode(matchNft.data, (address, uint));\\n            return royaltiesRegistry.getRoyalties(token, tokenId);\\n        } else if (matchNft.assetClass == LibERC1155LazyMint.ERC1155_LAZY_ASSET_CLASS) {\\n            (address token, LibERC1155LazyMint.Mint1155Data memory data) = abi.decode(matchNft.data, (address, LibERC1155LazyMint.Mint1155Data));\\n            return data.royalties;\\n        } else if (matchNft.assetClass == LibERC721LazyMint.ERC721_LAZY_ASSET_CLASS) {\\n            (address token, LibERC721LazyMint.Mint721Data memory data) = abi.decode(matchNft.data, (address, LibERC721LazyMint.Mint721Data));\\n            return data.royalties;\\n        }\\n        LibPart.Part[] memory empty;\\n        return empty;\\n    }\\n\\n    function transferFees(\\n        LibAsset.AssetType memory matchCalculate,\\n        uint rest,\\n        uint amount,\\n        LibPart.Part[] memory fees,\\n        address from,\\n        bytes4 transferDirection,\\n        bytes4 transferType\\n    ) internal returns (uint restValue, uint totalFees) {\\n        totalFees = 0;\\n        restValue = rest;\\n        for (uint256 i = 0; i < fees.length; i++) {\\n            totalFees = totalFees.add(fees[i].value);\\n            (uint newRestValue, uint feeValue) = subFeeInBp(restValue, amount,  fees[i].value);\\n            restValue = newRestValue;\\n            if (feeValue > 0) {\\n                transfer(LibAsset.Asset(matchCalculate, feeValue), from,  fees[i].account, transferDirection, transferType);\\n            }\\n        }\\n    }\\n\\n    function transferPayouts(\\n        LibAsset.AssetType memory matchCalculate,\\n        uint amount,\\n        address from,\\n        LibPart.Part[] memory payouts,\\n        bytes4 transferDirection\\n    ) internal {\\n        uint sumBps = 0;\\n        uint restValue = amount;\\n        for (uint256 i = 0; i < payouts.length - 1; i++) {\\n            uint currentAmount = amount.bp(payouts[i].value);\\n            sumBps = sumBps.add(payouts[i].value);\\n            if (currentAmount > 0) {\\n                restValue = restValue.sub(currentAmount);\\n                transfer(LibAsset.Asset(matchCalculate, currentAmount), from, payouts[i].account, transferDirection, PAYOUT);\\n            }\\n        }\\n        LibPart.Part memory lastPayout = payouts[payouts.length - 1];\\n        sumBps = sumBps.add(lastPayout.value);\\n        require(sumBps == 10000, \\\"Sum payouts Bps not equal 100%\\\");\\n        if (restValue > 0) {\\n            transfer(LibAsset.Asset(matchCalculate, restValue), from, lastPayout.account, transferDirection, PAYOUT);\\n        }\\n    }\\n\\n    function calculateTotalAmount(\\n        uint amount,\\n        uint feeOnTopBp,\\n        LibPart.Part[] memory orderOriginFees\\n    ) internal pure returns (uint total){\\n        total = amount.add(amount.bp(feeOnTopBp));\\n        for (uint256 i = 0; i < orderOriginFees.length; i++) {\\n            total = total.add(amount.bp(orderOriginFees[i].value));\\n        }\\n    }\\n\\n    function subFeeInBp(uint value, uint total, uint feeInBp) internal pure returns (uint newValue, uint realFee) {\\n        return subFee(value, total.bp(feeInBp));\\n    }\\n\\n    function subFee(uint value, uint fee) internal pure returns (uint newValue, uint realFee) {\\n        if (value > fee) {\\n            newValue = value.sub(fee);\\n            realFee = fee;\\n        } else {\\n            newValue = 0;\\n            realFee = value;\\n        }\\n    }\\n\\n\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x205933e0bd27d0f9c4c20fb91745fa01a6a599dcb5c85bf869047db8df0eaf34\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/TransferExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@sipher/exchange-interfaces/contracts/ITransferProxy.sol\\\";\\nimport \\\"@sipher/exchange-interfaces/contracts/INftTransferProxy.sol\\\";\\nimport \\\"@sipher/exchange-interfaces/contracts/IERC20TransferProxy.sol\\\";\\nimport \\\"./ITransferExecutor.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./lib/LibTransfer.sol\\\";\\n\\nabstract contract TransferExecutor is Initializable, OwnableUpgradeable, ITransferExecutor {\\n    using LibTransfer for address;\\n\\n    mapping (bytes4 => address) proxies;\\n\\n    event ProxyChange(bytes4 indexed assetType, address proxy);\\n\\n    function __TransferExecutor_init_unchained(INftTransferProxy transferProxy, IERC20TransferProxy erc20TransferProxy) internal {\\n        proxies[LibAsset.ERC20_ASSET_CLASS] = address(erc20TransferProxy);\\n        proxies[LibAsset.ERC721_ASSET_CLASS] = address(transferProxy);\\n        proxies[LibAsset.ERC1155_ASSET_CLASS] = address(transferProxy);\\n    }\\n\\n    function setTransferProxy(bytes4 assetType, address proxy) external onlyOwner {\\n        proxies[assetType] = proxy;\\n        emit ProxyChange(assetType, proxy);\\n    }\\n\\n    function transfer(\\n        LibAsset.Asset memory asset,\\n        address from,\\n        address to,\\n        bytes4 transferDirection,\\n        bytes4 transferType\\n    ) internal override {\\n        if (asset.assetType.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            to.transferEth(asset.value);\\n        } else if (asset.assetType.assetClass == LibAsset.ERC20_ASSET_CLASS) {\\n            (address token) = abi.decode(asset.assetType.data, (address));\\n            IERC20TransferProxy(proxies[LibAsset.ERC20_ASSET_CLASS]).erc20safeTransferFrom(IERC20Upgradeable(token), from, to, asset.value);\\n        } else if (asset.assetType.assetClass == LibAsset.ERC721_ASSET_CLASS) {\\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\n            require(asset.value == 1, \\\"erc721 value error\\\");\\n            INftTransferProxy(proxies[LibAsset.ERC721_ASSET_CLASS]).erc721safeTransferFrom(IERC721Upgradeable(token), from, to, tokenId);\\n        } else if (asset.assetType.assetClass == LibAsset.ERC1155_ASSET_CLASS) {\\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\n            INftTransferProxy(proxies[LibAsset.ERC1155_ASSET_CLASS]).erc1155safeTransferFrom(IERC1155Upgradeable(token), from, to, tokenId, asset.value, \\\"\\\");\\n        } else {\\n            ITransferProxy(proxies[asset.assetType.assetClass]).transfer(asset, from, to);\\n        }\\n        emit Transfer(asset, from, to, transferDirection, transferType);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9f778e137725a9d6912184dcf24172ee07d822745639d69dcd75699182bf2fd6\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IERC1271 {\\n\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _hash Hash of the data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes32 _hash, bytes calldata _signature) virtual external view returns (bytes4 magicValue);\\n}\",\"keccak256\":\"0x47e5ddd7f0504f513ccff6f04095004452c6b8332d3f88e6959ea189568b7878\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/lib/BpLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary BpLibrary {\\n    using SafeMathUpgradeable for uint;\\n\\n    function bp(uint value, uint bpValue) internal pure returns (uint) {\\n        return value.mul(bpValue).div(10000);\\n    }\\n}\\n\",\"keccak256\":\"0x17c563120ba6b4c52d10621806b18af45946fe64894d995e4d672cccf6c09c8c\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/lib/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary LibMath {\\n    using SafeMathUpgradeable for uint;\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = numerator.mul(target).div(denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * target)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(\\n            target,\\n            numerator,\\n            denominator\\n        );\\n        isError = remainder.mul(1000) >= numerator.mul(target);\\n    }\\n\\n    function safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = numerator.mul(target).add(denominator.sub(1)).div(denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // See the comments in `isRoundingError`.\\n        if (target == 0 || numerator == 0) {\\n            // When either is zero, the ideal value and rounded value are zero\\n            // and there is no rounding error. (Although the relative error\\n            // is undefined.)\\n            return false;\\n        }\\n        // Compute remainder as before\\n        uint256 remainder = mulmod(\\n            target,\\n            numerator,\\n            denominator\\n        );\\n        remainder = denominator.sub(remainder) % denominator;\\n        isError = remainder.mul(1000) >= numerator.mul(target);\\n        return isError;\\n    }\\n}\\n\",\"keccak256\":\"0x479e01de1a609d836f73eecb1ba5d0a3d78fa791979e8e4f361a576a61b101ec\",\"license\":\"MIT\"},\"@sipher/exchange-v2/contracts/lib/LibTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nlibrary LibTransfer {\\n    function transferEth(address to, uint value) internal {\\n        (bool success,) = to.call{ value: value }(\\\"\\\");\\n        require(success, \\\"transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x01cf87ba2ef274b5fa9d75731912b5a81eb1a50a870bf975288c65596cad2c85\",\"license\":\"MIT\"},\"@sipher/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@sipher/royalties/contracts/LibPart.sol\\\";\\n\\nlibrary LibERC1155LazyMint {\\n    bytes4 constant public ERC1155_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155_LAZY\\\"));\\n    bytes4 constant _INTERFACE_ID_MINT_AND_TRANSFER = 0x6db15a0f;\\n\\n    struct Mint1155Data {\\n        uint tokenId;\\n        string tokenURI;\\n        uint supply;\\n        LibPart.Part[] creators;\\n        LibPart.Part[] royalties;\\n        bytes[] signatures;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH = keccak256(\\\"Mint1155(uint256 tokenId,uint256 supply,string tokenURI,Part[] creators,Part[] royalties)Part(address account,uint96 value)\\\");\\n\\n    function hash(Mint1155Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        for (uint i = 0; i < data.royalties.length; i++) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        bytes32[] memory creatorsBytes = new bytes32[](data.creators.length);\\n        for (uint i = 0; i < data.creators.length; i++) {\\n            creatorsBytes[i] = LibPart.hash(data.creators[i]);\\n        }\\n        return keccak256(abi.encode(\\n                MINT_AND_TRANSFER_TYPEHASH,\\n                data.tokenId,\\n                data.supply,\\n                keccak256(bytes(data.tokenURI)),\\n                keccak256(abi.encodePacked(creatorsBytes)),\\n                keccak256(abi.encodePacked(royaltiesBytes))\\n            ));\\n    }\\n}\\n\",\"keccak256\":\"0x085dfbcbfdc8de84ef3cb13545da2e0ecf11f083939d2ae26b958566af2549f0\",\"license\":\"MIT\"},\"@sipher/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@sipher/royalties/contracts/LibPart.sol\\\";\\n\\nlibrary LibERC721LazyMint {\\n    bytes4 constant public ERC721_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC721_LAZY\\\"));\\n    bytes4 constant _INTERFACE_ID_MINT_AND_TRANSFER = 0x8486f69f;\\n\\n    struct Mint721Data {\\n        uint tokenId;\\n        string tokenURI;\\n        LibPart.Part[] creators;\\n        LibPart.Part[] royalties;\\n        bytes[] signatures;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH = keccak256(\\\"Mint721(uint256 tokenId,string tokenURI,Part[] creators,Part[] royalties)Part(address account,uint96 value)\\\");\\n\\n    function hash(Mint721Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        for (uint i = 0; i < data.royalties.length; i++) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        bytes32[] memory creatorsBytes = new bytes32[](data.creators.length);\\n        for (uint i = 0; i < data.creators.length; i++) {\\n            creatorsBytes[i] = LibPart.hash(data.creators[i]);\\n        }\\n        return keccak256(abi.encode(\\n                MINT_AND_TRANSFER_TYPEHASH,\\n                data.tokenId,\\n                keccak256(bytes(data.tokenURI)),\\n                keccak256(abi.encodePacked(creatorsBytes)),\\n                keccak256(abi.encodePacked(royaltiesBytes))\\n            ));\\n    }\\n\\n}\\n\",\"keccak256\":\"0xbae12d4057dca10311809da60977dc654e979e9e6174a743e384559883ce1f20\",\"license\":\"MIT\"},\"@sipher/lib-asset/contracts/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nlibrary LibAsset {\\n    bytes4 constant public ETH_ASSET_CLASS = bytes4(keccak256(\\\"ETH\\\"));\\n    bytes4 constant public ERC20_ASSET_CLASS = bytes4(keccak256(\\\"ERC20\\\"));\\n    bytes4 constant public ERC721_ASSET_CLASS = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 constant public ERC1155_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155\\\"));\\n    bytes4 constant public COLLECTION = bytes4(keccak256(\\\"COLLECTION\\\"));\\n    bytes4 constant public CRYPTO_PUNKS = bytes4(keccak256(\\\"CRYPTO_PUNKS\\\"));\\n\\n    bytes32 constant ASSET_TYPE_TYPEHASH = keccak256(\\n        \\\"AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    bytes32 constant ASSET_TYPEHASH = keccak256(\\n        \\\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n\\n    struct Asset {\\n        AssetType assetType;\\n        uint value;\\n    }\\n\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ASSET_TYPE_TYPEHASH,\\n                assetType.assetClass,\\n                keccak256(assetType.data)\\n            ));\\n    }\\n\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ASSET_TYPEHASH,\\n                hash(asset.assetType),\\n                asset.value\\n            ));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5d63bba4747a12a83c5628dba94bf56714b4dcf94f742ff28863034831061c8a\",\"license\":\"MIT\"},\"@sipher/libraries/contracts/LibSignature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nlibrary LibSignature {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        // v > 30 is a special case, we need to adjust hash with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n        // and v = v - 4\\n        address signer;\\n        if (v > 30) {\\n            require(\\n                v - 4 == 27 || v - 4 == 28,\\n                \\\"ECDSA: invalid signature 'v' value\\\"\\n            );\\n            signer = ecrecover(toEthSignedMessageHash(hash), v - 4, r, s);\\n        } else {\\n            require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n            signer = ecrecover(hash, v, r, s);\\n        }\\n\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x7a5583247b42c05cd0e592a870755c9b7bba3f2141f6e0dd1a123af504372237\",\"license\":\"MIT\"},\"@sipher/royalties/contracts/IRoyaltiesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\ninterface IRoyaltiesProvider {\\n    function getRoyalties(address token, uint tokenId) external returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0xbdf77460d9dfc59d271cb9075c80b59ff94530574d0287325c1c9003c1986841\",\"license\":\"MIT\"},\"@sipher/royalties/contracts/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xd0123f7411573a6a7e1527e0d3901913d7642e504ff240d5b7c5b76a28587def\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506154bb806100206000396000f3fe60806040526004361061010e5760003560e01c8063787dce3d116100a5578063b39deb4611610074578063e66db25e11610059578063e66db25e146102c1578063e99a3f80146102e1578063f2fde38b146102f45761010e565b8063b39deb4614610281578063e2864fe3146102a15761010e565b8063787dce3d146102175780637ed4bc4e146102375780638da5cb5b14610257578063b0e21e8a1461026c5761010e565b80633abf6fd4116100e15780633abf6fd4146101b85780633be89922146101cd5780636d8f0694146101ed578063715018a6146102025761010e565b806302097ab1146101135780631cdfe3d81461014957806320158c441461016b57806330c642f114610198575b600080fd5b34801561011f57600080fd5b5061013361012e36600461474f565b610314565b6040516101409190614d74565b60405180910390f35b34801561015557600080fd5b5061016961016436600461474f565b61033d565b005b34801561017757600080fd5b5061018b610186366004614a11565b610413565b6040516101409190615278565b3480156101a457600080fd5b506101696101b3366004614a29565b610426565b3480156101c457600080fd5b5061013361055f565b3480156101d957600080fd5b506101696101e836600461474f565b61057c565b3480156101f957600080fd5b50610133610652565b34801561020e57600080fd5b5061016961066f565b34801561022357600080fd5b50610169610232366004614a11565b61076c565b34801561024357600080fd5b50610169610252366004614a46565b610800565b34801561026357600080fd5b5061013361092c565b34801561027857600080fd5b5061018b610948565b34801561028d57600080fd5b5061016961029c366004614a29565b61094f565b3480156102ad57600080fd5b506101696102bc366004614bf0565b610a7c565b3480156102cd57600080fd5b506101696102dc3660046149a6565b610b87565b6101696102ef366004614c23565b610c69565b34801561030057600080fd5b5061016961030f36600461474f565b610d73565b6101646020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b610345610ee1565b73ffffffffffffffffffffffffffffffffffffffff1661036361092c565b73ffffffffffffffffffffffffffffffffffffffff16146103cb576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61016380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61012f6020526000908152604090205481565b61042e610ee1565b73ffffffffffffffffffffffffffffffffffffffff1661044c61092c565b73ffffffffffffffffffffffffffffffffffffffff16146104b4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b7fffffffff0000000000000000000000000000000000000000000000000000000082166000818152609760205260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516179055517f4b5aced933c0c9a88aeac3f0b3b72c5aaf75df8ebaf53225773248c4c315359390610553908490614d74565b60405180910390a25050565b6101635473ffffffffffffffffffffffffffffffffffffffff1681565b610584610ee1565b73ffffffffffffffffffffffffffffffffffffffff166105a261092c565b73ffffffffffffffffffffffffffffffffffffffff161461060a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61016280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101625473ffffffffffffffffffffffffffffffffffffffff1681565b610677610ee1565b73ffffffffffffffffffffffffffffffffffffffff1661069561092c565b73ffffffffffffffffffffffffffffffffffffffff16146106fd576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60335460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b610774610ee1565b73ffffffffffffffffffffffffffffffffffffffff1661079261092c565b73ffffffffffffffffffffffffffffffffffffffff16146107fa576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61016155565b600054610100900460ff16806108195750610819610ee5565b80610827575060005460ff16155b6108625760405162461bcd60e51b815260040180806020018281038252602e815260200180615415602e913960400191505060405180910390fd5b600054610100900460ff161580156108c857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b6108d0610ef6565b6108d8610ff0565b6108e28686611166565b6108ed84848461124e565b6108f56113a7565b801561092457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050505050565b60335473ffffffffffffffffffffffffffffffffffffffff1690565b6101615481565b610957610ee1565b73ffffffffffffffffffffffffffffffffffffffff1661097561092c565b73ffffffffffffffffffffffffffffffffffffffff16146109dd576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b7fffffffff0000000000000000000000000000000000000000000000000000000082166000818152606560205260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516179055517fd2bf91075f105d0fd80328da28e20ebdad1c1261839711183bc29a44cbe6c72f90610553908490614d74565b805173ffffffffffffffffffffffffffffffffffffffff16610a9c610ee1565b73ffffffffffffffffffffffffffffffffffffffff1614610ad85760405162461bcd60e51b8152600401610acf9061516c565b60405180910390fd5b6080810151610af95760405162461bcd60e51b8152600401610acf90614f68565b6000610b04826114e3565b600081815261012f60209081526040918290207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90558451908501515160608601515192519394507fbbdc98cb2835f4f846e6a63700d0498b4674f0e8858fd50c6379314227afa04e93610b7b9386939291614dbb565b60405180910390a15050565b610b8f610ee1565b73ffffffffffffffffffffffffffffffffffffffff16610bad61092c565b73ffffffffffffffffffffffffffffffffffffffff1614610c15576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff91821660009081526101646020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b610c7384846115d4565b610c7d82826115d4565b604084015173ffffffffffffffffffffffffffffffffffffffff1615610cf057836040015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1614610cf05760405162461bcd60e51b8152600401610acf906150d8565b604082015173ffffffffffffffffffffffffffffffffffffffff1615610d6357836000015173ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff1614610d635760405162461bcd60e51b8152600401610acf90614f9f565b610d6d84836115eb565b50505050565b610d7b610ee1565b73ffffffffffffffffffffffffffffffffffffffff16610d9961092c565b73ffffffffffffffffffffffffffffffffffffffff1614610e01576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610e535760405162461bcd60e51b81526004018080602001828103825260268152602001806153806026913960400191505060405180910390fd5b60335460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3390565b6000610ef030611817565b15905090565b600054610100900460ff1680610f0f5750610f0f610ee5565b80610f1d575060005460ff16155b610f585760405162461bcd60e51b815260040180806020018281038252602e815260200180615415602e913960400191505060405180910390fd5b600054610100900460ff16158015610fbe57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b8015610fed57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b600054610100900460ff16806110095750611009610ee5565b80611017575060005460ff16155b6110525760405162461bcd60e51b815260040180806020018281038252602e815260200180615415602e913960400191505060405180910390fd5b600054610100900460ff161580156110b857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b60006110c2610ee1565b603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610fed57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b60976020527f4532fa16f071d6234e30e1a1e69b9806f04095edf37a1ca7a25c8d6af7861cc0805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557f30a684095c937b5aa064dcf94f9903a7d808e3efb22d8389dbd43080ad4ed3d580549390921692811683179091557f973bb640000000000000000000000000000000000000000000000000000000006000527f4b5822151ea34b7c8d9e37c3e466bcecb631efe6a9f26a4a4054110a93dd316f80549091169091179055565b600054610100900460ff16806112675750611267610ee5565b80611275575060005460ff16155b6112b05760405162461bcd60e51b815260040180806020018281038252602e815260200180615415602e913960400191505060405180910390fd5b600054610100900460ff1615801561131657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b610161849055610163805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556101628054928516929091169190911790558015610d6d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550505050565b600054610100900460ff16806113c057506113c0610ee5565b806113ce575060005460ff16155b6114095760405162461bcd60e51b815260040180806020018281038252602e815260200180615415602e913960400191505060405180910390fd5b600054610100900460ff1615801561146f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b610fbe6040518060400160405280600881526020017f45786368616e67650000000000000000000000000000000000000000000000008152506040518060400160405280600181526020017f320000000000000000000000000000000000000000000000000000000000000081525061181d565b8051602082015151600091906114f890611936565b60608401515161150790611936565b8460800151856101000151604051602001808673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611580578181015183820152602001611568565b50505050905090810190601f1680156115ad5780820380516001836020036101000a031916815260200191505b5096505050505050506040516020818303038152906040528051906020012090505b919050565b6115dd826119b8565b6115e78282611a82565b5050565b6000806115f88484611db8565b915091506000611607856114e3565b90506000611614856114e3565b9050600061162187611e81565b9050600061162e87611e81565b90506000611640898987878787611f86565b90506000806116548989858e8e8a8a6120b1565b8a5191935091507fffffffff00000000000000000000000000000000000000000000000000000000167faaaebeba0000000000000000000000000000000000000000000000000000000014156117355787517fffffffff00000000000000000000000000000000000000000000000000000000167faaaebeba0000000000000000000000000000000000000000000000000000000014156116f457600080fd5b813410156117145760405162461bcd60e51b8152600401610acf90615135565b81341115611730576117306117293484612259565b33906122bb565b6117b5565b87517fffffffff00000000000000000000000000000000000000000000000000000000167faaaebeba0000000000000000000000000000000000000000000000000000000014156117b557803410156117a05760405162461bcd60e51b8152600401610acf90615135565b803411156117b5576117b56117293483612259565b7f268820db288a211986b26a8fda86b1e0046281b21206936bb0e61c67b5c79ef487878d600001518d60000151876020015188600001518f8f604051611802989796959493929190614e0d565b60405180910390a15050505050505050505050565b3b151590565b600054610100900460ff16806118365750611836610ee5565b80611844575060005460ff16155b61187f5760405162461bcd60e51b815260040180806020018281038252602e815260200180615415602e913960400191505060405180910390fd5b600054610100900460ff161580156118e557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b825160208085019190912083519184019190912060c99190915560ca55801561193157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b8051602091820151805190830120604080517f452a0dc408cb0d27ffc3b3caff933a5208040a53a9dbecd8d89cad2c0d40e00c818601527fffffffff0000000000000000000000000000000000000000000000000000000090931683820152606080840192909252805180840390920182526080909201909152805191012090565b60a081015115806119cc5750428160a00151105b611a1d576040805162461bcd60e51b815260206004820152601d60248201527f4f726465722073746172742076616c69646174696f6e206661696c6564000000604482015290519081900360640190fd5b60c08101511580611a315750428160c00151115b610fed576040805162461bcd60e51b815260206004820152601b60248201527f4f7264657220656e642076616c69646174696f6e206661696c65640000000000604482015290519081900360640190fd5b6080820151611b5b57815173ffffffffffffffffffffffffffffffffffffffff1615611b3557815173ffffffffffffffffffffffffffffffffffffffff16611ac8610ee1565b73ffffffffffffffffffffffffffffffffffffffff1614611b30576040805162461bcd60e51b815260206004820152601660248201527f6d616b6572206973206e6f742074782073656e64657200000000000000000000604482015290519081900360640190fd5b611b56565b611b3d610ee1565b73ffffffffffffffffffffffffffffffffffffffff1682525b6115e7565b815173ffffffffffffffffffffffffffffffffffffffff16611b7b610ee1565b73ffffffffffffffffffffffffffffffffffffffff16146115e7576000611ba18361236e565b90506000825160411415611bc557611bc283611bbc8461248d565b906124f4565b90505b835173ffffffffffffffffffffffffffffffffffffffff828116911614610d6d578351611c079073ffffffffffffffffffffffffffffffffffffffff16611817565b15611d815783517f1626ba7e000000000000000000000000000000000000000000000000000000009073ffffffffffffffffffffffffffffffffffffffff16631626ba7e611c548561248d565b866040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611ca7578181015183820152602001611c8f565b50505050905090810190601f168015611cd45780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015611cf257600080fd5b505afa158015611d06573d6000803e3d6000fd5b505050506040513d6020811015611d1c57600080fd5b50517fffffffff000000000000000000000000000000000000000000000000000000001614611d7c5760405162461bcd60e51b815260040180806020018281038252602b8152602001806153ea602b913960400191505060405180910390fd5b610d6d565b60405162461bcd60e51b81526004018080602001828103825260228152602001806153c86022913960400191505060405180910390fd5b611dc061437a565b611dc861437a565b602084015151606084015151611dde919061256a565b80519092507fffffffff0000000000000000000000000000000000000000000000000000000016611e215760405162461bcd60e51b8152600401610acf906150a1565b606084015151602084015151611e37919061256a565b80519091507fffffffff0000000000000000000000000000000000000000000000000000000016611e7a5760405162461bcd60e51b8152600401610acf906150a1565b9250929050565b611e89614392565b60e08201517fffffffff00000000000000000000000000000000000000000000000000000000167f23d235ef000000000000000000000000000000000000000000000000000000001415611eec57611ee58261010001516125c2565b9050611f6d565b60e08201517fffffffff000000000000000000000000000000000000000000000000000000009081161415611f2057611f6d565b6040805162461bcd60e51b815260206004820152601760248201527f556e6b6e6f776e204f7264657220646174612074797065000000000000000000604482015290519081900360640190fd5b8051516115cf578151611f7f906125de565b8152919050565b611f8e6143b5565b6000611f9a8887612698565b90506000611fa88887612698565b90506000611fc28a8a85858a604001518a604001516126c5565b905060008160200151118015611fd85750805115155b611ff45760405162461bcd60e51b8152600401610acf90615033565b60808a01511561204b5785604001511561202a57805161201590849061274b565b600089815261012f602052604090205561204b565b602081015161203a90849061274b565b600089815261012f60205260409020555b6080890151156120a25784604001511561208457602081015161206f90839061274b565b600088815261012f60205260409020556120a2565b805161209190839061274b565b600088815261012f60205260409020555b925050505b9695505050505050565b60008060006120c88a600001518a600001516127ac565b885160208a01519094509250905060018160028111156120e457fe5b141561215d578751875161211d919087878e8e7f1a0388dd7519a093630516a672419a2562e0e74deb98af068657dc265f0164c96129a3565b9250612158898960200151886000015188600001517fb45a3ba14423c8f1b71cc094845ab56b5294dbe8d8e3ba53f3cdb63d59a4044b612a67565b61224c565b600281600281111561216b57fe5b14156121df576121a88860200151876000015186888d8f7fb45a3ba14423c8f1b71cc094845ab56b5294dbe8d8e3ba53f3cdb63d59a4044b6129a3565b885188518651929450612158928d9291907f1a0388dd7519a093630516a672419a2562e0e74deb98af068657dc265f0164c9612a67565b875187518551612213928d9290917f1a0388dd7519a093630516a672419a2562e0e74deb98af068657dc265f0164c9612a67565b61224c898960200151886000015188600001517fb45a3ba14423c8f1b71cc094845ab56b5294dbe8d8e3ba53f3cdb63d59a4044b612a67565b5097509795505050505050565b6000828211156122b0576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b60405160009073ffffffffffffffffffffffffffffffffffffffff84169083908381818185875af1925050503d8060008114612313576040519150601f19603f3d011682016040523d82523d6000602084013e612318565b606091505b5050905080611931576040805162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b60007f477ed43b8020849b755512278536c3766a3b4ab547519949a75f483372493f8d82600001516123a38460200151612c1b565b84604001516123b58660600151612c1b565b86608001518760a001518860c001518960e001518a610100015180519060200120604051602001808b81526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152602001868152602001858152602001848152602001837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018281526020019a5050505050505050505050604051602081830303815290604052805190602001209050919050565b6000612497612c8b565b8260405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b6000815160411461254c576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a6120a786828585612ccb565b61257261437a565b600061257e8484612f2e565b80519091507fffffffff00000000000000000000000000000000000000000000000000000000166125bb576125b38385612f2e565b9150506122b5565b90506122b5565b6125ca614392565b818060200190518101906122b59190614b39565b60408051600180825281830190925260609160009190816020015b6126016143cf565b8152602001906001900390816125f9579050509050828160008151811061262457fe5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506127108160008151811061267257fe5b6020908102919091018101516bffffffffffffffffffffffff9092169101529050919050565b60008260800151600014156126af575060006122b5565b50600090815261012f6020526040902054919050565b6126cd6143b5565b6000806126db898887613353565b915091506000806126ed8a8988613353565b91509150838111156127205761271584848c60200151602001518d60600151602001516133cd565b9450505050506120a7565b61273c8b60200151602001518c60600151602001518484613452565b9b9a5050505050505050505050565b6000828201838110156127a5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000083167faaaebeba000000000000000000000000000000000000000000000000000000001415612800575060016122b5565b7fffffffff0000000000000000000000000000000000000000000000000000000082167faaaebeba000000000000000000000000000000000000000000000000000000001415612852575060026122b5565b7fffffffff0000000000000000000000000000000000000000000000000000000083167f8ae85d840000000000000000000000000000000000000000000000000000000014156128a4575060016122b5565b7fffffffff0000000000000000000000000000000000000000000000000000000082167f8ae85d840000000000000000000000000000000000000000000000000000000014156128f6575060026122b5565b7fffffffff0000000000000000000000000000000000000000000000000000000083167f973bb640000000000000000000000000000000000000000000000000000000001415612948575060016122b5565b7fffffffff0000000000000000000000000000000000000000000000000000000082167f973bb64000000000000000000000000000000000000000000000000000000000141561299a575060026122b5565b50600092915050565b60006129b7886101615488602001516134d8565b905060006129c8828a8a8887613550565b90506129d88585838c8c886136ae565b9050612a0d85828b8a602001518c887fdfdfdaf4cc275341b6776a7ee23b953990b8d991717449077287da70f32cf955613721565b5080915050612a4585828b89602001518c887fdfdfdaf4cc275341b6776a7ee23b953990b8d991717449077287da70f32cf955613721565b5080915050612a5b85828a896000015187612a67565b50979650505050505050565b600084815b6001855103811015612b61576000612ab2868381518110612a8957fe5b6020026020010151602001516bffffffffffffffffffffffff16896137ec90919063ffffffff16565b9050612aec868381518110612ac357fe5b6020026020010151602001516bffffffffffffffffffffffff168561274b90919063ffffffff16565b93508015612b5857612afe8382612259565b9250612b5860405180604001604052808b81526020018381525088888581518110612b2557fe5b602002602001015160000151887fa10bb5b2060a412d05113732875a5431ca23453eb93f797e0ffcb5b40e5f2c3e613804565b50600101612a6c565b50600084600186510381518110612b7457fe5b60200260200101519050612ba381602001516bffffffffffffffffffffffff168461274b90919063ffffffff16565b92508261271014612bc65760405162461bcd60e51b8152600401610acf9061506a565b8115612c1157612c1160405180604001604052808a815260200184815250878360000151877fa10bb5b2060a412d05113732875a5431ca23453eb93f797e0ffcb5b40e5f2c3e613804565b5050505050505050565b60007fdb6f72e915676cfc289da13bc4ece054fd17b1df6d77ffc4a60510718c236b08612c4b8360000151611936565b8360200151604051602001808481526020018381526020018281526020019350505050604051602081830303815290604052805190602001209050919050565b6000612cc67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f612cb9613d57565b612cc1613d5d565b613d63565b905090565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115612d2c5760405162461bcd60e51b81526004018080602001828103825260228152602001806153a66022913960400191505060405180910390fd5b6000601e8560ff161115612e06576004850360ff16601b1480612d5557506004850360ff16601c145b612d905760405162461bcd60e51b81526004018080602001828103825260228152602001806154436022913960400191505060405180910390fd5b6001612d9b87613dd2565b60048703868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612df5573d6000803e3d6000fd5b505050602060405103519050612ebd565b8460ff16601b1480612e1b57508460ff16601c145b612e565760405162461bcd60e51b81526004018080602001828103825260228152602001806154436022913960400191505060405180910390fd5b60018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612eb0573d6000803e3d6000fd5b5050506020604051035190505b73ffffffffffffffffffffffffffffffffffffffff8116612f25576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b612f3661437a565b825182517fffffffff0000000000000000000000000000000000000000000000000000000082167faaaebeba000000000000000000000000000000000000000000000000000000001415613003577fffffffff0000000000000000000000000000000000000000000000000000000081167faaaebeba000000000000000000000000000000000000000000000000000000001415612fd85784925050506122b5565b50506040805180820182526000808252825160208181019094529081529181019190915290506122b5565b7fffffffff0000000000000000000000000000000000000000000000000000000082167f8ae85d840000000000000000000000000000000000000000000000000000000014156130aa577fffffffff0000000000000000000000000000000000000000000000000000000081167f8ae85d84000000000000000000000000000000000000000000000000000000001415612fd8576130a18585613e23565b925050506122b5565b7fffffffff0000000000000000000000000000000000000000000000000000000082167f73ad2146000000000000000000000000000000000000000000000000000000001415613148577fffffffff0000000000000000000000000000000000000000000000000000000081167f73ad2146000000000000000000000000000000000000000000000000000000001415612fd8576130a18585613e23565b7fffffffff0000000000000000000000000000000000000000000000000000000082167f973bb6400000000000000000000000000000000000000000000000000000000014156131e6577fffffffff0000000000000000000000000000000000000000000000000000000081167f973bb640000000000000000000000000000000000000000000000000000000001415612fd8576130a18585613e23565b7fffffffff00000000000000000000000000000000000000000000000000000000821660009081526065602052604090205473ffffffffffffffffffffffffffffffffffffffff168015613304576040517f6d3f7cb000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690636d3f7cb09061328890899089906004016151a3565b60006040518083038186803b1580156132a057600080fd5b505afa1580156132b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526132fa9190810190614aad565b93505050506122b5565b7fffffffff00000000000000000000000000000000000000000000000000000000838116908316141561333b576132fa8686613e23565b60405162461bcd60e51b8152600401610acf90614efa565b600080821561339257602080860151015161336e9085612259565b915061338b85606001516020015186602001516020015184613e80565b90506133c5565b6060850151602001516133a59085612259565b90506133c285602001516020015186606001516020015183613e80565b91505b935093915050565b6133d56143b5565b60006133e2858585613e80565b905085811115613439576040805162461bcd60e51b815260206004820152601860248201527f66696c6c4c6566743a20756e61626c6520746f2066696c6c0000000000000000604482015290519081900360640190fd5b5050604080518082019091529384525050602082015290565b61345a6143b5565b6000613467838787613e80565b9050838111156134be576040805162461bcd60e51b815260206004820152601960248201527f66696c6c52696768743a20756e61626c6520746f2066696c6c00000000000000604482015290519081900360640190fd5b604080518082019091529283526020830152509392505050565b60006134ee6134e785856137ec565b859061274b565b905060005b82518110156135485761353e61353784838151811061350e57fe5b6020026020010151602001516bffffffffffffffffffffffff16876137ec90919063ffffffff16565b839061274b565b91506001016134f3565b509392505050565b60008060006135768888613571600261016154613ef590919063ffffffff16565b613f4e565b909250905080156136a35784516000907fffffffff00000000000000000000000000000000000000000000000000000000167f8ae85d840000000000000000000000000000000000000000000000000000000014156135ee5785602001518060200190518101906135e7919061476b565b9050613658565b85517fffffffff00000000000000000000000000000000000000000000000000000000167f973bb64000000000000000000000000000000000000000000000000000000000141561365857600086602001518060200190518101906136539190614979565b509150505b6136a16040518060400160405280888152602001848152508861367a84613f70565b887ff87e69cb514f255f3d32f9d90f25160a10d0cdefe6618a6406db334d4450595c613804565b505b509695505050505050565b6000806136ba87613fc9565b90506000806136ee8a8989868a8a7fb3c5c697ec0b511b76d12f6293e6ee827b1e1df79ac7c64d0466d945904893d7613721565b915091506113888111156137145760405162461bcd60e51b8152600401610acf90614f31565b5098975050505050505050565b856000805b865181101561224c5761376787828151811061373e57fe5b6020026020010151602001516bffffffffffffffffffffffff168361274b90919063ffffffff16565b915060008061379c858b8b868151811061377d57fe5b6020026020010151602001516bffffffffffffffffffffffff16613f4e565b909550859250905080156137e2576137e260405180604001604052808e815260200183815250898b86815181106137cf57fe5b6020026020010151600001518a8a613804565b5050600101613726565b60006127a56127106137fe8585613ef5565b9061424b565b8451517fffffffff00000000000000000000000000000000000000000000000000000000167faaaebeba00000000000000000000000000000000000000000000000000000000141561387b5760208501516138769073ffffffffffffffffffffffffffffffffffffffff8516906122bb565b613d11565b8451517fffffffff00000000000000000000000000000000000000000000000000000000167f8ae85d840000000000000000000000000000000000000000000000000000000014156139c95760008560000151602001518060200190518101906138e5919061476b565b7f8ae85d8400000000000000000000000000000000000000000000000000000000600052609760209081527f4532fa16f071d6234e30e1a1e69b9806f04095edf37a1ca7a25c8d6af7861cc054908801516040517f776062c300000000000000000000000000000000000000000000000000000000815292935073ffffffffffffffffffffffffffffffffffffffff9091169163776062c3916139919185918a918a9190600401614ec3565b600060405180830381600087803b1580156139ab57600080fd5b505af11580156139bf573d6000803e3d6000fd5b5050505050613d11565b8451517fffffffff00000000000000000000000000000000000000000000000000000000167f73ad2146000000000000000000000000000000000000000000000000000000001415613b3957600080866000015160200151806020019051810190613a349190614979565b915091508660200151600114613a5c5760405162461bcd60e51b8152600401610acf90614ffc565b7f73ad21460000000000000000000000000000000000000000000000000000000060005260976020527f30a684095c937b5aa064dcf94f9903a7d808e3efb22d8389dbd43080ad4ed3d5546040517ff709b90600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063f709b90690613b009085908a908a908790600401614ec3565b600060405180830381600087803b158015613b1a57600080fd5b505af1158015613b2e573d6000803e3d6000fd5b505050505050613d11565b8451517fffffffff00000000000000000000000000000000000000000000000000000000167f973bb640000000000000000000000000000000000000000000000000000000001415613c5257600080866000015160200151806020019051810190613ba49190614979565b7f973bb64000000000000000000000000000000000000000000000000000000000600052609760209081527f4b5822151ea34b7c8d9e37c3e466bcecb631efe6a9f26a4a4054110a93dd316f54908a01516040517f9c1c2ee900000000000000000000000000000000000000000000000000000000815293955091935073ffffffffffffffffffffffffffffffffffffffff1691639c1c2ee991613b009186918b918b918891600401614e73565b8451517fffffffff0000000000000000000000000000000000000000000000000000000016600090815260976020526040908190205490517f54bc0cf100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906354bc0cf190613cde908890889088906004016151c8565b600060405180830381600087803b158015613cf857600080fd5b505af1158015613d0c573d6000803e3d6000fd5b505050505b7fcae9d16f553e92058883de29cb3135dbc0c1e31fd7eace79fef1d80577fe482e8585858585604051613d48959493929190615208565b60405180910390a15050505050565b60c95490565b60ca5490565b6000838383613d706142b2565b30604051602001808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b613e2b61437a565b60208084015180519082012083820151805192019190912080821415613e555784925050506122b5565b5050604080518082018252600080825282516020808201909452908152918101919091529392505050565b6000613e8d8484846142b6565b15613edf576040805162461bcd60e51b815260206004820152600e60248201527f726f756e64696e67206572726f72000000000000000000000000000000000000604482015290519081900360640190fd5b613eed836137fe8685613ef5565b949350505050565b600082613f04575060006122b5565b82820282848281613f1157fe5b04146127a55760405162461bcd60e51b81526004018080602001828103825260218152602001806154656021913960400191505060405180910390fd5b600080613f6485613f5f86866137ec565b614352565b91509150935093915050565b73ffffffffffffffffffffffffffffffffffffffff808216600090815261016460205260408120549091168015613fa85790506115cf565b50506101635473ffffffffffffffffffffffffffffffffffffffff16919050565b80516060907fffffffff00000000000000000000000000000000000000000000000000000000167f973bb64000000000000000000000000000000000000000000000000000000000148061405f575081517fffffffff00000000000000000000000000000000000000000000000000000000167f73ad214600000000000000000000000000000000000000000000000000000000145b1561415957600080836020015180602001905181019061407f9190614979565b610162546040517f9ca7dc7a00000000000000000000000000000000000000000000000000000000815292945090925073ffffffffffffffffffffffffffffffffffffffff1690639ca7dc7a906140dc9085908590600401614d95565b600060405180830381600087803b1580156140f657600080fd5b505af115801561410a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261415091908101906149de565b925050506115cf565b81517fffffffff00000000000000000000000000000000000000000000000000000000167f1cdfaa400000000000000000000000000000000000000000000000000000000014156141ce5760008083602001518060200190518101906141bf9190614787565b6080015193506115cf92505050565b81517fffffffff00000000000000000000000000000000000000000000000000000000167fd8f960c10000000000000000000000000000000000000000000000000000000014156142435760008083602001518060200190518101906142349190614885565b6060015193506115cf92505050565b506060919050565b60008082116142a1576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816142aa57fe5b049392505050565b4690565b60008261430a576040805162461bcd60e51b815260206004820152601060248201527f6469766973696f6e206279207a65726f00000000000000000000000000000000604482015290519081900360640190fd5b811580614315575083155b15614322575060006127a5565b6000838061432c57fe5b858409905061433b8584613ef5565b614347826103e8613ef5565b101595945050505050565b60008082841115614371576143678484612259565b9150829050611e7a565b50600093915050565b60408051808201909152600081526060602082015290565b604051806060016040528060608152602001606081526020016000151581525090565b604051806040016040528060008152602001600081525090565b604080518082019091526000808252602082015290565b80356115cf8161532f565b600082601f830112614401578081fd5b81516020614416614411836152a5565b615281565b82815281810190858301855b8581101561444b57614439898684518b0101614570565b84529284019290840190600101614422565b5090979650505050505050565b600082601f830112614468578081fd5b81516020614478614411836152a5565b82815281810190858301604080860288018501891015614496578687fd5b865b8681101561450b5781838b0312156144ae578788fd5b815182810181811067ffffffffffffffff821117156144c957fe5b835283516144d68161532f565b8152838701516bffffffffffffffffffffffff811681146144f557898afd5b8188015285529385019391810191600101614498565b509198975050505050505050565b80356115cf81615351565b600082601f830112614534578081fd5b8135614542614411826152c3565b818152846020838601011115614556578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112614580578081fd5b815161458e614411826152c3565b8181528460208386010111156145a2578283fd5b613eed826020830160208701615303565b600060408083850312156145c5578182fd5b805181810167ffffffffffffffff82821081831117156145e157fe5b8184528294508535818111156145f657600080fd5b860180880385131561460757600080fd5b60808401838110838211171561461957fe5b90945283359361462885615351565b9382526020840135938185111561463e57600080fd5b61464a88868301614524565b60608501525050815260209384013593019290925292915050565b6000610120808385031215614678578182fd5b61468181615281565b91505061468d826143e6565b8152602082013567ffffffffffffffff808211156146aa57600080fd5b6146b6858386016145b3565b60208401526146c7604085016143e6565b604084015260608401359150808211156146e057600080fd5b6146ec858386016145b3565b60608401526080840135608084015260a084013560a084015260c084013560c084015261471b60e08501614519565b60e08401526101009150818401358181111561473657600080fd5b61474286828701614524565b8385015250505092915050565b600060208284031215614760578081fd5b81356127a58161532f565b60006020828403121561477c578081fd5b81516127a58161532f565b60008060408385031215614799578081fd5b82516147a48161532f565b602084015190925067ffffffffffffffff808211156147c1578283fd5b9084019060c082870312156147d4578283fd5b6147de60c0615281565b825181526020830151828111156147f3578485fd5b6147ff88828601614570565b60208301525060408301516040820152606083015182811115614820578485fd5b61482c88828601614458565b606083015250608083015182811115614843578485fd5b61484f88828601614458565b60808301525060a083015182811115614866578485fd5b614872888286016143f1565b60a0830152508093505050509250929050565b60008060408385031215614897578182fd5b82516148a28161532f565b602084015190925067ffffffffffffffff808211156148bf578283fd5b9084019060a082870312156148d2578283fd5b6148dc60a0615281565b825181526020830151828111156148f1578485fd5b6148fd88828601614570565b602083015250604083015182811115614914578485fd5b61492088828601614458565b604083015250606083015182811115614937578485fd5b61494388828601614458565b60608301525060808301518281111561495a578485fd5b614966888286016143f1565b6080830152508093505050509250929050565b6000806040838503121561498b578182fd5b82516149968161532f565b6020939093015192949293505050565b600080604083850312156149b8578182fd5b82356149c38161532f565b915060208301356149d38161532f565b809150509250929050565b6000602082840312156149ef578081fd5b815167ffffffffffffffff811115614a05578182fd5b613eed84828501614458565b600060208284031215614a22578081fd5b5035919050565b60008060408385031215614a3b578182fd5b82356149c381615351565b600080600080600060a08688031215614a5d578081fd5b8535614a688161532f565b94506020860135614a788161532f565b9350604086013592506060860135614a8f8161532f565b91506080860135614a9f8161532f565b809150509295509295909350565b600060208284031215614abe578081fd5b815167ffffffffffffffff80821115614ad5578283fd5b9083019060408286031215614ae8578283fd5b604051604081018181108382111715614afd57fe5b6040528251614b0b81615351565b8152602083015182811115614b1e578485fd5b614b2a87828601614570565b60208301525095945050505050565b600060208284031215614b4a578081fd5b815167ffffffffffffffff80821115614b61578283fd5b9083019060608286031215614b74578283fd5b604051606081018181108382111715614b8957fe5b604052825182811115614b9a578485fd5b614ba687828601614458565b825250602083015182811115614bba578485fd5b614bc687828601614458565b602083015250604083015192508215158314614be0578384fd5b6040810192909252509392505050565b600060208284031215614c01578081fd5b813567ffffffffffffffff811115614c17578182fd5b613eed84828501614665565b60008060008060808587031215614c38578182fd5b843567ffffffffffffffff80821115614c4f578384fd5b614c5b88838901614665565b95506020870135915080821115614c70578384fd5b614c7c88838901614524565b94506040870135915080821115614c91578384fd5b614c9d88838901614665565b93506060870135915080821115614cb2578283fd5b50614cbf87828801614524565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082511683526020820151604060208501528051806040860152614d18816060870160208501615303565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016939093016060019392505050565b6000815160408452614d606040850182614ccb565b602093840151949093019390935250919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600085825273ffffffffffffffffffffffffffffffffffffffff8516602083015260806040830152614df06080830185614ccb565b8281036060840152614e028185614ccb565b979650505050505050565b60006101008a835289602084015273ffffffffffffffffffffffffffffffffffffffff808a1660408501528089166060850152508660808401528560a08401528060c0840152614e5f81840186614ccb565b905082810360e084015261273c8185614ccb565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260c060a0820181905260009082015260e00190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b60208082526017908201527f6e6f7420666f756e64204941737365744d617463686572000000000000000000604082015260600190565b6020808252601d908201527f526f79616c746965732061726520746f6f206869676820283e35302529000000604082015260600190565b60208082526014908201527f302073616c742063616e27742062652075736564000000000000000000000000604082015260600190565b60208082526024908201527f72696768744f726465722e74616b657220766572696669636174696f6e20666160408201527f696c656400000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526012908201527f6572633732312076616c7565206572726f720000000000000000000000000000604082015260600190565b6020808252600f908201527f6e6f7468696e6720746f2066696c6c0000000000000000000000000000000000604082015260600190565b6020808252601e908201527f53756d207061796f75747320427073206e6f7420657175616c20313030250000604082015260600190565b60208082526012908201527f61737365747320646f6e2774206d617463680000000000000000000000000000604082015260600190565b60208082526023908201527f6c6566744f726465722e74616b657220766572696669636174696f6e2066616960408201527f6c65640000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f6e6f7420656e6f75676820657468000000000000000000000000000000000000604082015260600190565b6020808252600b908201527f6e6f742061206d616b6572000000000000000000000000000000000000000000604082015260600190565b6000604082526151b66040830185614ccb565b8281036020840152612f258185614ccb565b6000606082526151db6060830186614d4b565b73ffffffffffffffffffffffffffffffffffffffff94851660208401529290931660409091015292915050565b600060a0825261521b60a0830188614d4b565b73ffffffffffffffffffffffffffffffffffffffff96871660208401529490951660408201527fffffffff000000000000000000000000000000000000000000000000000000009283166060820152911660809091015292915050565b90815260200190565b60405181810167ffffffffffffffff8111828210171561529d57fe5b604052919050565b600067ffffffffffffffff8211156152b957fe5b5060209081020190565b600067ffffffffffffffff8211156152d757fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561531e578181015183820152602001615306565b83811115610d6d5750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114610fed57600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610fed57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345434453413a20696e76616c6964207369676e6174757265202773272076616c75656f72646572207369676e617475726520766572696669636174696f6e206572726f72636f6e7472616374206f72646572207369676e617475726520766572696669636174696f6e206572726f72496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445434453413a20696e76616c6964207369676e6174757265202776272076616c7565536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212208a5b42d4d586b63e605fbdbbb14bc521a1debad7c1958e9bc37eeca5d5c2d4f864736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061010e5760003560e01c8063787dce3d116100a5578063b39deb4611610074578063e66db25e11610059578063e66db25e146102c1578063e99a3f80146102e1578063f2fde38b146102f45761010e565b8063b39deb4614610281578063e2864fe3146102a15761010e565b8063787dce3d146102175780637ed4bc4e146102375780638da5cb5b14610257578063b0e21e8a1461026c5761010e565b80633abf6fd4116100e15780633abf6fd4146101b85780633be89922146101cd5780636d8f0694146101ed578063715018a6146102025761010e565b806302097ab1146101135780631cdfe3d81461014957806320158c441461016b57806330c642f114610198575b600080fd5b34801561011f57600080fd5b5061013361012e36600461474f565b610314565b6040516101409190614d74565b60405180910390f35b34801561015557600080fd5b5061016961016436600461474f565b61033d565b005b34801561017757600080fd5b5061018b610186366004614a11565b610413565b6040516101409190615278565b3480156101a457600080fd5b506101696101b3366004614a29565b610426565b3480156101c457600080fd5b5061013361055f565b3480156101d957600080fd5b506101696101e836600461474f565b61057c565b3480156101f957600080fd5b50610133610652565b34801561020e57600080fd5b5061016961066f565b34801561022357600080fd5b50610169610232366004614a11565b61076c565b34801561024357600080fd5b50610169610252366004614a46565b610800565b34801561026357600080fd5b5061013361092c565b34801561027857600080fd5b5061018b610948565b34801561028d57600080fd5b5061016961029c366004614a29565b61094f565b3480156102ad57600080fd5b506101696102bc366004614bf0565b610a7c565b3480156102cd57600080fd5b506101696102dc3660046149a6565b610b87565b6101696102ef366004614c23565b610c69565b34801561030057600080fd5b5061016961030f36600461474f565b610d73565b6101646020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b610345610ee1565b73ffffffffffffffffffffffffffffffffffffffff1661036361092c565b73ffffffffffffffffffffffffffffffffffffffff16146103cb576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61016380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61012f6020526000908152604090205481565b61042e610ee1565b73ffffffffffffffffffffffffffffffffffffffff1661044c61092c565b73ffffffffffffffffffffffffffffffffffffffff16146104b4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b7fffffffff0000000000000000000000000000000000000000000000000000000082166000818152609760205260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516179055517f4b5aced933c0c9a88aeac3f0b3b72c5aaf75df8ebaf53225773248c4c315359390610553908490614d74565b60405180910390a25050565b6101635473ffffffffffffffffffffffffffffffffffffffff1681565b610584610ee1565b73ffffffffffffffffffffffffffffffffffffffff166105a261092c565b73ffffffffffffffffffffffffffffffffffffffff161461060a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61016280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101625473ffffffffffffffffffffffffffffffffffffffff1681565b610677610ee1565b73ffffffffffffffffffffffffffffffffffffffff1661069561092c565b73ffffffffffffffffffffffffffffffffffffffff16146106fd576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60335460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b610774610ee1565b73ffffffffffffffffffffffffffffffffffffffff1661079261092c565b73ffffffffffffffffffffffffffffffffffffffff16146107fa576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61016155565b600054610100900460ff16806108195750610819610ee5565b80610827575060005460ff16155b6108625760405162461bcd60e51b815260040180806020018281038252602e815260200180615415602e913960400191505060405180910390fd5b600054610100900460ff161580156108c857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b6108d0610ef6565b6108d8610ff0565b6108e28686611166565b6108ed84848461124e565b6108f56113a7565b801561092457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050505050565b60335473ffffffffffffffffffffffffffffffffffffffff1690565b6101615481565b610957610ee1565b73ffffffffffffffffffffffffffffffffffffffff1661097561092c565b73ffffffffffffffffffffffffffffffffffffffff16146109dd576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b7fffffffff0000000000000000000000000000000000000000000000000000000082166000818152606560205260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516179055517fd2bf91075f105d0fd80328da28e20ebdad1c1261839711183bc29a44cbe6c72f90610553908490614d74565b805173ffffffffffffffffffffffffffffffffffffffff16610a9c610ee1565b73ffffffffffffffffffffffffffffffffffffffff1614610ad85760405162461bcd60e51b8152600401610acf9061516c565b60405180910390fd5b6080810151610af95760405162461bcd60e51b8152600401610acf90614f68565b6000610b04826114e3565b600081815261012f60209081526040918290207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90558451908501515160608601515192519394507fbbdc98cb2835f4f846e6a63700d0498b4674f0e8858fd50c6379314227afa04e93610b7b9386939291614dbb565b60405180910390a15050565b610b8f610ee1565b73ffffffffffffffffffffffffffffffffffffffff16610bad61092c565b73ffffffffffffffffffffffffffffffffffffffff1614610c15576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff91821660009081526101646020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b610c7384846115d4565b610c7d82826115d4565b604084015173ffffffffffffffffffffffffffffffffffffffff1615610cf057836040015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1614610cf05760405162461bcd60e51b8152600401610acf906150d8565b604082015173ffffffffffffffffffffffffffffffffffffffff1615610d6357836000015173ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff1614610d635760405162461bcd60e51b8152600401610acf90614f9f565b610d6d84836115eb565b50505050565b610d7b610ee1565b73ffffffffffffffffffffffffffffffffffffffff16610d9961092c565b73ffffffffffffffffffffffffffffffffffffffff1614610e01576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610e535760405162461bcd60e51b81526004018080602001828103825260268152602001806153806026913960400191505060405180910390fd5b60335460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3390565b6000610ef030611817565b15905090565b600054610100900460ff1680610f0f5750610f0f610ee5565b80610f1d575060005460ff16155b610f585760405162461bcd60e51b815260040180806020018281038252602e815260200180615415602e913960400191505060405180910390fd5b600054610100900460ff16158015610fbe57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b8015610fed57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b600054610100900460ff16806110095750611009610ee5565b80611017575060005460ff16155b6110525760405162461bcd60e51b815260040180806020018281038252602e815260200180615415602e913960400191505060405180910390fd5b600054610100900460ff161580156110b857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b60006110c2610ee1565b603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610fed57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b60976020527f4532fa16f071d6234e30e1a1e69b9806f04095edf37a1ca7a25c8d6af7861cc0805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557f30a684095c937b5aa064dcf94f9903a7d808e3efb22d8389dbd43080ad4ed3d580549390921692811683179091557f973bb640000000000000000000000000000000000000000000000000000000006000527f4b5822151ea34b7c8d9e37c3e466bcecb631efe6a9f26a4a4054110a93dd316f80549091169091179055565b600054610100900460ff16806112675750611267610ee5565b80611275575060005460ff16155b6112b05760405162461bcd60e51b815260040180806020018281038252602e815260200180615415602e913960400191505060405180910390fd5b600054610100900460ff1615801561131657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b610161849055610163805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556101628054928516929091169190911790558015610d6d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550505050565b600054610100900460ff16806113c057506113c0610ee5565b806113ce575060005460ff16155b6114095760405162461bcd60e51b815260040180806020018281038252602e815260200180615415602e913960400191505060405180910390fd5b600054610100900460ff1615801561146f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b610fbe6040518060400160405280600881526020017f45786368616e67650000000000000000000000000000000000000000000000008152506040518060400160405280600181526020017f320000000000000000000000000000000000000000000000000000000000000081525061181d565b8051602082015151600091906114f890611936565b60608401515161150790611936565b8460800151856101000151604051602001808673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611580578181015183820152602001611568565b50505050905090810190601f1680156115ad5780820380516001836020036101000a031916815260200191505b5096505050505050506040516020818303038152906040528051906020012090505b919050565b6115dd826119b8565b6115e78282611a82565b5050565b6000806115f88484611db8565b915091506000611607856114e3565b90506000611614856114e3565b9050600061162187611e81565b9050600061162e87611e81565b90506000611640898987878787611f86565b90506000806116548989858e8e8a8a6120b1565b8a5191935091507fffffffff00000000000000000000000000000000000000000000000000000000167faaaebeba0000000000000000000000000000000000000000000000000000000014156117355787517fffffffff00000000000000000000000000000000000000000000000000000000167faaaebeba0000000000000000000000000000000000000000000000000000000014156116f457600080fd5b813410156117145760405162461bcd60e51b8152600401610acf90615135565b81341115611730576117306117293484612259565b33906122bb565b6117b5565b87517fffffffff00000000000000000000000000000000000000000000000000000000167faaaebeba0000000000000000000000000000000000000000000000000000000014156117b557803410156117a05760405162461bcd60e51b8152600401610acf90615135565b803411156117b5576117b56117293483612259565b7f268820db288a211986b26a8fda86b1e0046281b21206936bb0e61c67b5c79ef487878d600001518d60000151876020015188600001518f8f604051611802989796959493929190614e0d565b60405180910390a15050505050505050505050565b3b151590565b600054610100900460ff16806118365750611836610ee5565b80611844575060005460ff16155b61187f5760405162461bcd60e51b815260040180806020018281038252602e815260200180615415602e913960400191505060405180910390fd5b600054610100900460ff161580156118e557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b825160208085019190912083519184019190912060c99190915560ca55801561193157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b8051602091820151805190830120604080517f452a0dc408cb0d27ffc3b3caff933a5208040a53a9dbecd8d89cad2c0d40e00c818601527fffffffff0000000000000000000000000000000000000000000000000000000090931683820152606080840192909252805180840390920182526080909201909152805191012090565b60a081015115806119cc5750428160a00151105b611a1d576040805162461bcd60e51b815260206004820152601d60248201527f4f726465722073746172742076616c69646174696f6e206661696c6564000000604482015290519081900360640190fd5b60c08101511580611a315750428160c00151115b610fed576040805162461bcd60e51b815260206004820152601b60248201527f4f7264657220656e642076616c69646174696f6e206661696c65640000000000604482015290519081900360640190fd5b6080820151611b5b57815173ffffffffffffffffffffffffffffffffffffffff1615611b3557815173ffffffffffffffffffffffffffffffffffffffff16611ac8610ee1565b73ffffffffffffffffffffffffffffffffffffffff1614611b30576040805162461bcd60e51b815260206004820152601660248201527f6d616b6572206973206e6f742074782073656e64657200000000000000000000604482015290519081900360640190fd5b611b56565b611b3d610ee1565b73ffffffffffffffffffffffffffffffffffffffff1682525b6115e7565b815173ffffffffffffffffffffffffffffffffffffffff16611b7b610ee1565b73ffffffffffffffffffffffffffffffffffffffff16146115e7576000611ba18361236e565b90506000825160411415611bc557611bc283611bbc8461248d565b906124f4565b90505b835173ffffffffffffffffffffffffffffffffffffffff828116911614610d6d578351611c079073ffffffffffffffffffffffffffffffffffffffff16611817565b15611d815783517f1626ba7e000000000000000000000000000000000000000000000000000000009073ffffffffffffffffffffffffffffffffffffffff16631626ba7e611c548561248d565b866040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611ca7578181015183820152602001611c8f565b50505050905090810190601f168015611cd45780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015611cf257600080fd5b505afa158015611d06573d6000803e3d6000fd5b505050506040513d6020811015611d1c57600080fd5b50517fffffffff000000000000000000000000000000000000000000000000000000001614611d7c5760405162461bcd60e51b815260040180806020018281038252602b8152602001806153ea602b913960400191505060405180910390fd5b610d6d565b60405162461bcd60e51b81526004018080602001828103825260228152602001806153c86022913960400191505060405180910390fd5b611dc061437a565b611dc861437a565b602084015151606084015151611dde919061256a565b80519092507fffffffff0000000000000000000000000000000000000000000000000000000016611e215760405162461bcd60e51b8152600401610acf906150a1565b606084015151602084015151611e37919061256a565b80519091507fffffffff0000000000000000000000000000000000000000000000000000000016611e7a5760405162461bcd60e51b8152600401610acf906150a1565b9250929050565b611e89614392565b60e08201517fffffffff00000000000000000000000000000000000000000000000000000000167f23d235ef000000000000000000000000000000000000000000000000000000001415611eec57611ee58261010001516125c2565b9050611f6d565b60e08201517fffffffff000000000000000000000000000000000000000000000000000000009081161415611f2057611f6d565b6040805162461bcd60e51b815260206004820152601760248201527f556e6b6e6f776e204f7264657220646174612074797065000000000000000000604482015290519081900360640190fd5b8051516115cf578151611f7f906125de565b8152919050565b611f8e6143b5565b6000611f9a8887612698565b90506000611fa88887612698565b90506000611fc28a8a85858a604001518a604001516126c5565b905060008160200151118015611fd85750805115155b611ff45760405162461bcd60e51b8152600401610acf90615033565b60808a01511561204b5785604001511561202a57805161201590849061274b565b600089815261012f602052604090205561204b565b602081015161203a90849061274b565b600089815261012f60205260409020555b6080890151156120a25784604001511561208457602081015161206f90839061274b565b600088815261012f60205260409020556120a2565b805161209190839061274b565b600088815261012f60205260409020555b925050505b9695505050505050565b60008060006120c88a600001518a600001516127ac565b885160208a01519094509250905060018160028111156120e457fe5b141561215d578751875161211d919087878e8e7f1a0388dd7519a093630516a672419a2562e0e74deb98af068657dc265f0164c96129a3565b9250612158898960200151886000015188600001517fb45a3ba14423c8f1b71cc094845ab56b5294dbe8d8e3ba53f3cdb63d59a4044b612a67565b61224c565b600281600281111561216b57fe5b14156121df576121a88860200151876000015186888d8f7fb45a3ba14423c8f1b71cc094845ab56b5294dbe8d8e3ba53f3cdb63d59a4044b6129a3565b885188518651929450612158928d9291907f1a0388dd7519a093630516a672419a2562e0e74deb98af068657dc265f0164c9612a67565b875187518551612213928d9290917f1a0388dd7519a093630516a672419a2562e0e74deb98af068657dc265f0164c9612a67565b61224c898960200151886000015188600001517fb45a3ba14423c8f1b71cc094845ab56b5294dbe8d8e3ba53f3cdb63d59a4044b612a67565b5097509795505050505050565b6000828211156122b0576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b60405160009073ffffffffffffffffffffffffffffffffffffffff84169083908381818185875af1925050503d8060008114612313576040519150601f19603f3d011682016040523d82523d6000602084013e612318565b606091505b5050905080611931576040805162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b60007f477ed43b8020849b755512278536c3766a3b4ab547519949a75f483372493f8d82600001516123a38460200151612c1b565b84604001516123b58660600151612c1b565b86608001518760a001518860c001518960e001518a610100015180519060200120604051602001808b81526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152602001868152602001858152602001848152602001837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018281526020019a5050505050505050505050604051602081830303815290604052805190602001209050919050565b6000612497612c8b565b8260405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b6000815160411461254c576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a6120a786828585612ccb565b61257261437a565b600061257e8484612f2e565b80519091507fffffffff00000000000000000000000000000000000000000000000000000000166125bb576125b38385612f2e565b9150506122b5565b90506122b5565b6125ca614392565b818060200190518101906122b59190614b39565b60408051600180825281830190925260609160009190816020015b6126016143cf565b8152602001906001900390816125f9579050509050828160008151811061262457fe5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506127108160008151811061267257fe5b6020908102919091018101516bffffffffffffffffffffffff9092169101529050919050565b60008260800151600014156126af575060006122b5565b50600090815261012f6020526040902054919050565b6126cd6143b5565b6000806126db898887613353565b915091506000806126ed8a8988613353565b91509150838111156127205761271584848c60200151602001518d60600151602001516133cd565b9450505050506120a7565b61273c8b60200151602001518c60600151602001518484613452565b9b9a5050505050505050505050565b6000828201838110156127a5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000083167faaaebeba000000000000000000000000000000000000000000000000000000001415612800575060016122b5565b7fffffffff0000000000000000000000000000000000000000000000000000000082167faaaebeba000000000000000000000000000000000000000000000000000000001415612852575060026122b5565b7fffffffff0000000000000000000000000000000000000000000000000000000083167f8ae85d840000000000000000000000000000000000000000000000000000000014156128a4575060016122b5565b7fffffffff0000000000000000000000000000000000000000000000000000000082167f8ae85d840000000000000000000000000000000000000000000000000000000014156128f6575060026122b5565b7fffffffff0000000000000000000000000000000000000000000000000000000083167f973bb640000000000000000000000000000000000000000000000000000000001415612948575060016122b5565b7fffffffff0000000000000000000000000000000000000000000000000000000082167f973bb64000000000000000000000000000000000000000000000000000000000141561299a575060026122b5565b50600092915050565b60006129b7886101615488602001516134d8565b905060006129c8828a8a8887613550565b90506129d88585838c8c886136ae565b9050612a0d85828b8a602001518c887fdfdfdaf4cc275341b6776a7ee23b953990b8d991717449077287da70f32cf955613721565b5080915050612a4585828b89602001518c887fdfdfdaf4cc275341b6776a7ee23b953990b8d991717449077287da70f32cf955613721565b5080915050612a5b85828a896000015187612a67565b50979650505050505050565b600084815b6001855103811015612b61576000612ab2868381518110612a8957fe5b6020026020010151602001516bffffffffffffffffffffffff16896137ec90919063ffffffff16565b9050612aec868381518110612ac357fe5b6020026020010151602001516bffffffffffffffffffffffff168561274b90919063ffffffff16565b93508015612b5857612afe8382612259565b9250612b5860405180604001604052808b81526020018381525088888581518110612b2557fe5b602002602001015160000151887fa10bb5b2060a412d05113732875a5431ca23453eb93f797e0ffcb5b40e5f2c3e613804565b50600101612a6c565b50600084600186510381518110612b7457fe5b60200260200101519050612ba381602001516bffffffffffffffffffffffff168461274b90919063ffffffff16565b92508261271014612bc65760405162461bcd60e51b8152600401610acf9061506a565b8115612c1157612c1160405180604001604052808a815260200184815250878360000151877fa10bb5b2060a412d05113732875a5431ca23453eb93f797e0ffcb5b40e5f2c3e613804565b5050505050505050565b60007fdb6f72e915676cfc289da13bc4ece054fd17b1df6d77ffc4a60510718c236b08612c4b8360000151611936565b8360200151604051602001808481526020018381526020018281526020019350505050604051602081830303815290604052805190602001209050919050565b6000612cc67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f612cb9613d57565b612cc1613d5d565b613d63565b905090565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115612d2c5760405162461bcd60e51b81526004018080602001828103825260228152602001806153a66022913960400191505060405180910390fd5b6000601e8560ff161115612e06576004850360ff16601b1480612d5557506004850360ff16601c145b612d905760405162461bcd60e51b81526004018080602001828103825260228152602001806154436022913960400191505060405180910390fd5b6001612d9b87613dd2565b60048703868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612df5573d6000803e3d6000fd5b505050602060405103519050612ebd565b8460ff16601b1480612e1b57508460ff16601c145b612e565760405162461bcd60e51b81526004018080602001828103825260228152602001806154436022913960400191505060405180910390fd5b60018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612eb0573d6000803e3d6000fd5b5050506020604051035190505b73ffffffffffffffffffffffffffffffffffffffff8116612f25576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b612f3661437a565b825182517fffffffff0000000000000000000000000000000000000000000000000000000082167faaaebeba000000000000000000000000000000000000000000000000000000001415613003577fffffffff0000000000000000000000000000000000000000000000000000000081167faaaebeba000000000000000000000000000000000000000000000000000000001415612fd85784925050506122b5565b50506040805180820182526000808252825160208181019094529081529181019190915290506122b5565b7fffffffff0000000000000000000000000000000000000000000000000000000082167f8ae85d840000000000000000000000000000000000000000000000000000000014156130aa577fffffffff0000000000000000000000000000000000000000000000000000000081167f8ae85d84000000000000000000000000000000000000000000000000000000001415612fd8576130a18585613e23565b925050506122b5565b7fffffffff0000000000000000000000000000000000000000000000000000000082167f73ad2146000000000000000000000000000000000000000000000000000000001415613148577fffffffff0000000000000000000000000000000000000000000000000000000081167f73ad2146000000000000000000000000000000000000000000000000000000001415612fd8576130a18585613e23565b7fffffffff0000000000000000000000000000000000000000000000000000000082167f973bb6400000000000000000000000000000000000000000000000000000000014156131e6577fffffffff0000000000000000000000000000000000000000000000000000000081167f973bb640000000000000000000000000000000000000000000000000000000001415612fd8576130a18585613e23565b7fffffffff00000000000000000000000000000000000000000000000000000000821660009081526065602052604090205473ffffffffffffffffffffffffffffffffffffffff168015613304576040517f6d3f7cb000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690636d3f7cb09061328890899089906004016151a3565b60006040518083038186803b1580156132a057600080fd5b505afa1580156132b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526132fa9190810190614aad565b93505050506122b5565b7fffffffff00000000000000000000000000000000000000000000000000000000838116908316141561333b576132fa8686613e23565b60405162461bcd60e51b8152600401610acf90614efa565b600080821561339257602080860151015161336e9085612259565b915061338b85606001516020015186602001516020015184613e80565b90506133c5565b6060850151602001516133a59085612259565b90506133c285602001516020015186606001516020015183613e80565b91505b935093915050565b6133d56143b5565b60006133e2858585613e80565b905085811115613439576040805162461bcd60e51b815260206004820152601860248201527f66696c6c4c6566743a20756e61626c6520746f2066696c6c0000000000000000604482015290519081900360640190fd5b5050604080518082019091529384525050602082015290565b61345a6143b5565b6000613467838787613e80565b9050838111156134be576040805162461bcd60e51b815260206004820152601960248201527f66696c6c52696768743a20756e61626c6520746f2066696c6c00000000000000604482015290519081900360640190fd5b604080518082019091529283526020830152509392505050565b60006134ee6134e785856137ec565b859061274b565b905060005b82518110156135485761353e61353784838151811061350e57fe5b6020026020010151602001516bffffffffffffffffffffffff16876137ec90919063ffffffff16565b839061274b565b91506001016134f3565b509392505050565b60008060006135768888613571600261016154613ef590919063ffffffff16565b613f4e565b909250905080156136a35784516000907fffffffff00000000000000000000000000000000000000000000000000000000167f8ae85d840000000000000000000000000000000000000000000000000000000014156135ee5785602001518060200190518101906135e7919061476b565b9050613658565b85517fffffffff00000000000000000000000000000000000000000000000000000000167f973bb64000000000000000000000000000000000000000000000000000000000141561365857600086602001518060200190518101906136539190614979565b509150505b6136a16040518060400160405280888152602001848152508861367a84613f70565b887ff87e69cb514f255f3d32f9d90f25160a10d0cdefe6618a6406db334d4450595c613804565b505b509695505050505050565b6000806136ba87613fc9565b90506000806136ee8a8989868a8a7fb3c5c697ec0b511b76d12f6293e6ee827b1e1df79ac7c64d0466d945904893d7613721565b915091506113888111156137145760405162461bcd60e51b8152600401610acf90614f31565b5098975050505050505050565b856000805b865181101561224c5761376787828151811061373e57fe5b6020026020010151602001516bffffffffffffffffffffffff168361274b90919063ffffffff16565b915060008061379c858b8b868151811061377d57fe5b6020026020010151602001516bffffffffffffffffffffffff16613f4e565b909550859250905080156137e2576137e260405180604001604052808e815260200183815250898b86815181106137cf57fe5b6020026020010151600001518a8a613804565b5050600101613726565b60006127a56127106137fe8585613ef5565b9061424b565b8451517fffffffff00000000000000000000000000000000000000000000000000000000167faaaebeba00000000000000000000000000000000000000000000000000000000141561387b5760208501516138769073ffffffffffffffffffffffffffffffffffffffff8516906122bb565b613d11565b8451517fffffffff00000000000000000000000000000000000000000000000000000000167f8ae85d840000000000000000000000000000000000000000000000000000000014156139c95760008560000151602001518060200190518101906138e5919061476b565b7f8ae85d8400000000000000000000000000000000000000000000000000000000600052609760209081527f4532fa16f071d6234e30e1a1e69b9806f04095edf37a1ca7a25c8d6af7861cc054908801516040517f776062c300000000000000000000000000000000000000000000000000000000815292935073ffffffffffffffffffffffffffffffffffffffff9091169163776062c3916139919185918a918a9190600401614ec3565b600060405180830381600087803b1580156139ab57600080fd5b505af11580156139bf573d6000803e3d6000fd5b5050505050613d11565b8451517fffffffff00000000000000000000000000000000000000000000000000000000167f73ad2146000000000000000000000000000000000000000000000000000000001415613b3957600080866000015160200151806020019051810190613a349190614979565b915091508660200151600114613a5c5760405162461bcd60e51b8152600401610acf90614ffc565b7f73ad21460000000000000000000000000000000000000000000000000000000060005260976020527f30a684095c937b5aa064dcf94f9903a7d808e3efb22d8389dbd43080ad4ed3d5546040517ff709b90600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063f709b90690613b009085908a908a908790600401614ec3565b600060405180830381600087803b158015613b1a57600080fd5b505af1158015613b2e573d6000803e3d6000fd5b505050505050613d11565b8451517fffffffff00000000000000000000000000000000000000000000000000000000167f973bb640000000000000000000000000000000000000000000000000000000001415613c5257600080866000015160200151806020019051810190613ba49190614979565b7f973bb64000000000000000000000000000000000000000000000000000000000600052609760209081527f4b5822151ea34b7c8d9e37c3e466bcecb631efe6a9f26a4a4054110a93dd316f54908a01516040517f9c1c2ee900000000000000000000000000000000000000000000000000000000815293955091935073ffffffffffffffffffffffffffffffffffffffff1691639c1c2ee991613b009186918b918b918891600401614e73565b8451517fffffffff0000000000000000000000000000000000000000000000000000000016600090815260976020526040908190205490517f54bc0cf100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906354bc0cf190613cde908890889088906004016151c8565b600060405180830381600087803b158015613cf857600080fd5b505af1158015613d0c573d6000803e3d6000fd5b505050505b7fcae9d16f553e92058883de29cb3135dbc0c1e31fd7eace79fef1d80577fe482e8585858585604051613d48959493929190615208565b60405180910390a15050505050565b60c95490565b60ca5490565b6000838383613d706142b2565b30604051602001808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b613e2b61437a565b60208084015180519082012083820151805192019190912080821415613e555784925050506122b5565b5050604080518082018252600080825282516020808201909452908152918101919091529392505050565b6000613e8d8484846142b6565b15613edf576040805162461bcd60e51b815260206004820152600e60248201527f726f756e64696e67206572726f72000000000000000000000000000000000000604482015290519081900360640190fd5b613eed836137fe8685613ef5565b949350505050565b600082613f04575060006122b5565b82820282848281613f1157fe5b04146127a55760405162461bcd60e51b81526004018080602001828103825260218152602001806154656021913960400191505060405180910390fd5b600080613f6485613f5f86866137ec565b614352565b91509150935093915050565b73ffffffffffffffffffffffffffffffffffffffff808216600090815261016460205260408120549091168015613fa85790506115cf565b50506101635473ffffffffffffffffffffffffffffffffffffffff16919050565b80516060907fffffffff00000000000000000000000000000000000000000000000000000000167f973bb64000000000000000000000000000000000000000000000000000000000148061405f575081517fffffffff00000000000000000000000000000000000000000000000000000000167f73ad214600000000000000000000000000000000000000000000000000000000145b1561415957600080836020015180602001905181019061407f9190614979565b610162546040517f9ca7dc7a00000000000000000000000000000000000000000000000000000000815292945090925073ffffffffffffffffffffffffffffffffffffffff1690639ca7dc7a906140dc9085908590600401614d95565b600060405180830381600087803b1580156140f657600080fd5b505af115801561410a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261415091908101906149de565b925050506115cf565b81517fffffffff00000000000000000000000000000000000000000000000000000000167f1cdfaa400000000000000000000000000000000000000000000000000000000014156141ce5760008083602001518060200190518101906141bf9190614787565b6080015193506115cf92505050565b81517fffffffff00000000000000000000000000000000000000000000000000000000167fd8f960c10000000000000000000000000000000000000000000000000000000014156142435760008083602001518060200190518101906142349190614885565b6060015193506115cf92505050565b506060919050565b60008082116142a1576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816142aa57fe5b049392505050565b4690565b60008261430a576040805162461bcd60e51b815260206004820152601060248201527f6469766973696f6e206279207a65726f00000000000000000000000000000000604482015290519081900360640190fd5b811580614315575083155b15614322575060006127a5565b6000838061432c57fe5b858409905061433b8584613ef5565b614347826103e8613ef5565b101595945050505050565b60008082841115614371576143678484612259565b9150829050611e7a565b50600093915050565b60408051808201909152600081526060602082015290565b604051806060016040528060608152602001606081526020016000151581525090565b604051806040016040528060008152602001600081525090565b604080518082019091526000808252602082015290565b80356115cf8161532f565b600082601f830112614401578081fd5b81516020614416614411836152a5565b615281565b82815281810190858301855b8581101561444b57614439898684518b0101614570565b84529284019290840190600101614422565b5090979650505050505050565b600082601f830112614468578081fd5b81516020614478614411836152a5565b82815281810190858301604080860288018501891015614496578687fd5b865b8681101561450b5781838b0312156144ae578788fd5b815182810181811067ffffffffffffffff821117156144c957fe5b835283516144d68161532f565b8152838701516bffffffffffffffffffffffff811681146144f557898afd5b8188015285529385019391810191600101614498565b509198975050505050505050565b80356115cf81615351565b600082601f830112614534578081fd5b8135614542614411826152c3565b818152846020838601011115614556578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112614580578081fd5b815161458e614411826152c3565b8181528460208386010111156145a2578283fd5b613eed826020830160208701615303565b600060408083850312156145c5578182fd5b805181810167ffffffffffffffff82821081831117156145e157fe5b8184528294508535818111156145f657600080fd5b860180880385131561460757600080fd5b60808401838110838211171561461957fe5b90945283359361462885615351565b9382526020840135938185111561463e57600080fd5b61464a88868301614524565b60608501525050815260209384013593019290925292915050565b6000610120808385031215614678578182fd5b61468181615281565b91505061468d826143e6565b8152602082013567ffffffffffffffff808211156146aa57600080fd5b6146b6858386016145b3565b60208401526146c7604085016143e6565b604084015260608401359150808211156146e057600080fd5b6146ec858386016145b3565b60608401526080840135608084015260a084013560a084015260c084013560c084015261471b60e08501614519565b60e08401526101009150818401358181111561473657600080fd5b61474286828701614524565b8385015250505092915050565b600060208284031215614760578081fd5b81356127a58161532f565b60006020828403121561477c578081fd5b81516127a58161532f565b60008060408385031215614799578081fd5b82516147a48161532f565b602084015190925067ffffffffffffffff808211156147c1578283fd5b9084019060c082870312156147d4578283fd5b6147de60c0615281565b825181526020830151828111156147f3578485fd5b6147ff88828601614570565b60208301525060408301516040820152606083015182811115614820578485fd5b61482c88828601614458565b606083015250608083015182811115614843578485fd5b61484f88828601614458565b60808301525060a083015182811115614866578485fd5b614872888286016143f1565b60a0830152508093505050509250929050565b60008060408385031215614897578182fd5b82516148a28161532f565b602084015190925067ffffffffffffffff808211156148bf578283fd5b9084019060a082870312156148d2578283fd5b6148dc60a0615281565b825181526020830151828111156148f1578485fd5b6148fd88828601614570565b602083015250604083015182811115614914578485fd5b61492088828601614458565b604083015250606083015182811115614937578485fd5b61494388828601614458565b60608301525060808301518281111561495a578485fd5b614966888286016143f1565b6080830152508093505050509250929050565b6000806040838503121561498b578182fd5b82516149968161532f565b6020939093015192949293505050565b600080604083850312156149b8578182fd5b82356149c38161532f565b915060208301356149d38161532f565b809150509250929050565b6000602082840312156149ef578081fd5b815167ffffffffffffffff811115614a05578182fd5b613eed84828501614458565b600060208284031215614a22578081fd5b5035919050565b60008060408385031215614a3b578182fd5b82356149c381615351565b600080600080600060a08688031215614a5d578081fd5b8535614a688161532f565b94506020860135614a788161532f565b9350604086013592506060860135614a8f8161532f565b91506080860135614a9f8161532f565b809150509295509295909350565b600060208284031215614abe578081fd5b815167ffffffffffffffff80821115614ad5578283fd5b9083019060408286031215614ae8578283fd5b604051604081018181108382111715614afd57fe5b6040528251614b0b81615351565b8152602083015182811115614b1e578485fd5b614b2a87828601614570565b60208301525095945050505050565b600060208284031215614b4a578081fd5b815167ffffffffffffffff80821115614b61578283fd5b9083019060608286031215614b74578283fd5b604051606081018181108382111715614b8957fe5b604052825182811115614b9a578485fd5b614ba687828601614458565b825250602083015182811115614bba578485fd5b614bc687828601614458565b602083015250604083015192508215158314614be0578384fd5b6040810192909252509392505050565b600060208284031215614c01578081fd5b813567ffffffffffffffff811115614c17578182fd5b613eed84828501614665565b60008060008060808587031215614c38578182fd5b843567ffffffffffffffff80821115614c4f578384fd5b614c5b88838901614665565b95506020870135915080821115614c70578384fd5b614c7c88838901614524565b94506040870135915080821115614c91578384fd5b614c9d88838901614665565b93506060870135915080821115614cb2578283fd5b50614cbf87828801614524565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082511683526020820151604060208501528051806040860152614d18816060870160208501615303565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016939093016060019392505050565b6000815160408452614d606040850182614ccb565b602093840151949093019390935250919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600085825273ffffffffffffffffffffffffffffffffffffffff8516602083015260806040830152614df06080830185614ccb565b8281036060840152614e028185614ccb565b979650505050505050565b60006101008a835289602084015273ffffffffffffffffffffffffffffffffffffffff808a1660408501528089166060850152508660808401528560a08401528060c0840152614e5f81840186614ccb565b905082810360e084015261273c8185614ccb565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260c060a0820181905260009082015260e00190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b60208082526017908201527f6e6f7420666f756e64204941737365744d617463686572000000000000000000604082015260600190565b6020808252601d908201527f526f79616c746965732061726520746f6f206869676820283e35302529000000604082015260600190565b60208082526014908201527f302073616c742063616e27742062652075736564000000000000000000000000604082015260600190565b60208082526024908201527f72696768744f726465722e74616b657220766572696669636174696f6e20666160408201527f696c656400000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526012908201527f6572633732312076616c7565206572726f720000000000000000000000000000604082015260600190565b6020808252600f908201527f6e6f7468696e6720746f2066696c6c0000000000000000000000000000000000604082015260600190565b6020808252601e908201527f53756d207061796f75747320427073206e6f7420657175616c20313030250000604082015260600190565b60208082526012908201527f61737365747320646f6e2774206d617463680000000000000000000000000000604082015260600190565b60208082526023908201527f6c6566744f726465722e74616b657220766572696669636174696f6e2066616960408201527f6c65640000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f6e6f7420656e6f75676820657468000000000000000000000000000000000000604082015260600190565b6020808252600b908201527f6e6f742061206d616b6572000000000000000000000000000000000000000000604082015260600190565b6000604082526151b66040830185614ccb565b8281036020840152612f258185614ccb565b6000606082526151db6060830186614d4b565b73ffffffffffffffffffffffffffffffffffffffff94851660208401529290931660409091015292915050565b600060a0825261521b60a0830188614d4b565b73ffffffffffffffffffffffffffffffffffffffff96871660208401529490951660408201527fffffffff000000000000000000000000000000000000000000000000000000009283166060820152911660809091015292915050565b90815260200190565b60405181810167ffffffffffffffff8111828210171561529d57fe5b604052919050565b600067ffffffffffffffff8211156152b957fe5b5060209081020190565b600067ffffffffffffffff8211156152d757fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561531e578181015183820152602001615306565b83811115610d6d5750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114610fed57600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610fed57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345434453413a20696e76616c6964207369676e6174757265202773272076616c75656f72646572207369676e617475726520766572696669636174696f6e206572726f72636f6e7472616374206f72646572207369676e617475726520766572696669636174696f6e206572726f72496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445434453413a20696e76616c6964207369676e6174757265202776272076616c7565536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212208a5b42d4d586b63e605fbdbbb14bc521a1debad7c1958e9bc37eeca5d5c2d4f864736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 812,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 815,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1662,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3714,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "matchers",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 3960,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6358,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "proxies",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 6604,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 138,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "201",
        "type": "t_bytes32"
      },
      {
        "astId": 140,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "202",
        "type": "t_bytes32"
      },
      {
        "astId": 289,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5395,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4047,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "fills",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 4580,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5422,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "protocolFee",
        "offset": 0,
        "slot": "353",
        "type": "t_uint256"
      },
      {
        "astId": 5424,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "royaltiesRegistry",
        "offset": 0,
        "slot": "354",
        "type": "t_contract(IRoyaltiesProvider)8792"
      },
      {
        "astId": 5426,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "defaultFeeReceiver",
        "offset": 0,
        "slot": "355",
        "type": "t_address"
      },
      {
        "astId": 5430,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "feeReceivers",
        "offset": 0,
        "slot": "356",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6334,
        "contract": "@sipher/exchange-v2/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "357",
        "type": "t_array(t_uint256)46_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IRoyaltiesProvider)8792": {
        "encoding": "inplace",
        "label": "contract IRoyaltiesProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}