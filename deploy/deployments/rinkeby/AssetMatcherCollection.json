{
  "address": "0x94Cd47b7189c64103173055EB9AFD6A853CA052B",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibAsset.AssetType",
          "name": "leftAssetType",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibAsset.AssetType",
          "name": "rightAssetType",
          "type": "tuple"
        }
      ],
      "name": "matchAssets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibAsset.AssetType",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5232178d7a8c7eac21b170ef76cf70fd83f7c9a69e83e9fdba2f9e9ceba38f11",
  "receipt": {
    "to": null,
    "from": "0xB6B61613268921913A5c01dF94D21D4de34e84cE",
    "contractAddress": "0x94Cd47b7189c64103173055EB9AFD6A853CA052B",
    "transactionIndex": 36,
    "gasUsed": "361403",
    "logsBloom": "0x
    "blockHash": "0x3c084c6fe36838bc121e52eb82df77eecbef367d81fbd1bbea2cd248dd0dbab5",
    "transactionHash": "0x5232178d7a8c7eac21b170ef76cf70fd83f7c9a69e83e9fdba2f9e9ceba38f11",
    "logs": [],
    "blockNumber": 10137287,
    "cumulativeGasUsed": "5138854",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5984c7f03812587892acb97832768254",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"leftAssetType\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"rightAssetType\",\"type\":\"tuple\"}],\"name\":\"matchAssets\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sipher/custom-matchers/contracts/AssetMatcherCollection.sol\":\"AssetMatcherCollection\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":22000},\"remappings\":[]},\"sources\":{\"@sipher/custom-matchers/contracts/AssetMatcherCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@sipher/exchange-interfaces/contracts/IAssetMatcher.sol\\\";\\nimport \\\"@sipher/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\\\";\\nimport \\\"@sipher/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\\\";\\n\\n/*\\n * Custom matcher for collection (assetClass, that need any/all elements from collection)\\n */\\ncontract AssetMatcherCollection is IAssetMatcher {\\n\\n    bytes constant EMPTY = \\\"\\\";\\n\\n    function matchAssets(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) public view override returns (LibAsset.AssetType memory) {\\n        if (\\n            (rightAssetType.assetClass == LibAsset.ERC721_ASSET_CLASS) || \\n            (rightAssetType.assetClass == LibERC721LazyMint.ERC721_LAZY_ASSET_CLASS) ||\\n            (rightAssetType.assetClass == LibAsset.ERC1155_ASSET_CLASS) || \\n            (rightAssetType.assetClass == LibERC1155LazyMint.ERC1155_LAZY_ASSET_CLASS) ||\\n            (rightAssetType.assetClass == LibAsset.CRYPTO_PUNKS)\\n        ) {\\n          (address leftToken) = abi.decode(leftAssetType.data, (address));\\n          (address rightToken,) = abi.decode(rightAssetType.data, (address, uint));\\n          if (leftToken == rightToken) {\\n              return LibAsset.AssetType(rightAssetType.assetClass, rightAssetType.data);\\n          }\\n        }\\n        return LibAsset.AssetType(0, EMPTY);\\n    }\\n}\",\"keccak256\":\"0x688780cf18a9b3641bce72433e05178d26064fde648bebd145cad0eccf25361b\",\"license\":\"MIT\"},\"@sipher/exchange-interfaces/contracts/IAssetMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@sipher/lib-asset/contracts/LibAsset.sol\\\";\\n\\ninterface IAssetMatcher {\\n    function matchAssets(\\n        LibAsset.AssetType memory leftAssetType,\\n        LibAsset.AssetType memory rightAssetType\\n    ) external view returns (LibAsset.AssetType memory);\\n}\\n\",\"keccak256\":\"0x6640d85c1191e8adb8e56e947c5a3be42721afeb117f633be19fc836a6ea8366\",\"license\":\"MIT\"},\"@sipher/lazy-mint/contracts/erc-1155/LibERC1155LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@sipher/royalties/contracts/LibPart.sol\\\";\\n\\nlibrary LibERC1155LazyMint {\\n    bytes4 constant public ERC1155_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155_LAZY\\\"));\\n    bytes4 constant _INTERFACE_ID_MINT_AND_TRANSFER = 0x6db15a0f;\\n\\n    struct Mint1155Data {\\n        uint tokenId;\\n        string tokenURI;\\n        uint supply;\\n        LibPart.Part[] creators;\\n        LibPart.Part[] royalties;\\n        bytes[] signatures;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH = keccak256(\\\"Mint1155(uint256 tokenId,uint256 supply,string tokenURI,Part[] creators,Part[] royalties)Part(address account,uint96 value)\\\");\\n\\n    function hash(Mint1155Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        for (uint i = 0; i < data.royalties.length; i++) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        bytes32[] memory creatorsBytes = new bytes32[](data.creators.length);\\n        for (uint i = 0; i < data.creators.length; i++) {\\n            creatorsBytes[i] = LibPart.hash(data.creators[i]);\\n        }\\n        return keccak256(abi.encode(\\n                MINT_AND_TRANSFER_TYPEHASH,\\n                data.tokenId,\\n                data.supply,\\n                keccak256(bytes(data.tokenURI)),\\n                keccak256(abi.encodePacked(creatorsBytes)),\\n                keccak256(abi.encodePacked(royaltiesBytes))\\n            ));\\n    }\\n}\\n\",\"keccak256\":\"0x085dfbcbfdc8de84ef3cb13545da2e0ecf11f083939d2ae26b958566af2549f0\",\"license\":\"MIT\"},\"@sipher/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@sipher/royalties/contracts/LibPart.sol\\\";\\n\\nlibrary LibERC721LazyMint {\\n    bytes4 constant public ERC721_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC721_LAZY\\\"));\\n    bytes4 constant _INTERFACE_ID_MINT_AND_TRANSFER = 0x8486f69f;\\n\\n    struct Mint721Data {\\n        uint tokenId;\\n        string tokenURI;\\n        LibPart.Part[] creators;\\n        LibPart.Part[] royalties;\\n        bytes[] signatures;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH = keccak256(\\\"Mint721(uint256 tokenId,string tokenURI,Part[] creators,Part[] royalties)Part(address account,uint96 value)\\\");\\n\\n    function hash(Mint721Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        for (uint i = 0; i < data.royalties.length; i++) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        bytes32[] memory creatorsBytes = new bytes32[](data.creators.length);\\n        for (uint i = 0; i < data.creators.length; i++) {\\n            creatorsBytes[i] = LibPart.hash(data.creators[i]);\\n        }\\n        return keccak256(abi.encode(\\n                MINT_AND_TRANSFER_TYPEHASH,\\n                data.tokenId,\\n                keccak256(bytes(data.tokenURI)),\\n                keccak256(abi.encodePacked(creatorsBytes)),\\n                keccak256(abi.encodePacked(royaltiesBytes))\\n            ));\\n    }\\n\\n}\\n\",\"keccak256\":\"0xbae12d4057dca10311809da60977dc654e979e9e6174a743e384559883ce1f20\",\"license\":\"MIT\"},\"@sipher/lib-asset/contracts/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nlibrary LibAsset {\\n    bytes4 constant public ETH_ASSET_CLASS = bytes4(keccak256(\\\"ETH\\\"));\\n    bytes4 constant public ERC20_ASSET_CLASS = bytes4(keccak256(\\\"ERC20\\\"));\\n    bytes4 constant public ERC721_ASSET_CLASS = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 constant public ERC1155_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155\\\"));\\n    bytes4 constant public COLLECTION = bytes4(keccak256(\\\"COLLECTION\\\"));\\n    bytes4 constant public CRYPTO_PUNKS = bytes4(keccak256(\\\"CRYPTO_PUNKS\\\"));\\n\\n    bytes32 constant ASSET_TYPE_TYPEHASH = keccak256(\\n        \\\"AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    bytes32 constant ASSET_TYPEHASH = keccak256(\\n        \\\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n\\n    struct Asset {\\n        AssetType assetType;\\n        uint value;\\n    }\\n\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ASSET_TYPE_TYPEHASH,\\n                assetType.assetClass,\\n                keccak256(assetType.data)\\n            ));\\n    }\\n\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ASSET_TYPEHASH,\\n                hash(asset.assetType),\\n                asset.value\\n            ));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5d63bba4747a12a83c5628dba94bf56714b4dcf94f742ff28863034831061c8a\",\"license\":\"MIT\"},\"@sipher/royalties/contracts/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xd0123f7411573a6a7e1527e0d3901913d7642e504ff240d5b7c5b76a28587def\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506105a6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636d3f7cb014610030575b600080fd5b61004361003e366004610446565b610059565b60405161005091906104a7565b60405180910390f35b6100616102bd565b81517fffffffff00000000000000000000000000000000000000000000000000000000167f73ad21460000000000000000000000000000000000000000000000000000000014806100f4575081517fffffffff00000000000000000000000000000000000000000000000000000000167fd8f960c100000000000000000000000000000000000000000000000000000000145b80610141575081517fffffffff00000000000000000000000000000000000000000000000000000000167f973bb64000000000000000000000000000000000000000000000000000000000145b8061018e575081517fffffffff00000000000000000000000000000000000000000000000000000000167f1cdfaa4000000000000000000000000000000000000000000000000000000000145b806101db575081517fffffffff00000000000000000000000000000000000000000000000000000000167f3e6b89d400000000000000000000000000000000000000000000000000000000145b1561029357600083602001518060200190518101906101fa91906103fa565b905060008360200151806020019051810190610216919061041b565b5090508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156102905750506040805180820190915282517fffffffff000000000000000000000000000000000000000000000000000000001681526020808401519082015290506102b7565b50505b50604080518082018252600080825282516020818101909452908152918101919091525b92915050565b60408051808201909152600081526060602082015290565b805173ffffffffffffffffffffffffffffffffffffffff811681146102f957600080fd5b919050565b60006040828403121561030f578081fd5b6040516040810167ffffffffffffffff828210818311171561032d57fe5b81604052829350843591507fffffffff000000000000000000000000000000000000000000000000000000008216821461036657600080fd5b908252602090848201358181111561037d57600080fd5b8501601f8101871361038e57600080fd5b80358281111561039a57fe5b6103ca847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161054c565b925080835287848284010111156103e057600080fd5b808483018585013760009083018401525091015292915050565b60006020828403121561040b578081fd5b610414826102d5565b9392505050565b6000806040838503121561042d578081fd5b610436836102d5565b9150602083015190509250929050565b60008060408385031215610458578182fd5b823567ffffffffffffffff8082111561046f578384fd5b61047b868387016102fe565b93506020850135915080821115610490578283fd5b5061049d858286016102fe565b9150509250929050565b600060208083527fffffffff0000000000000000000000000000000000000000000000000000000084511681840152808401516040808501528051806060860152835b81811015610506578281018401518682016080015283016104ea565b818111156105175784608083880101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01693909301608001949350505050565b60405181810167ffffffffffffffff8111828210171561056857fe5b60405291905056fea2646970667358221220b2ec3e4041f37bcc696a3b9a321a4345863196a9e27fce237de190c0b0aca75b64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80636d3f7cb014610030575b600080fd5b61004361003e366004610446565b610059565b60405161005091906104a7565b60405180910390f35b6100616102bd565b81517fffffffff00000000000000000000000000000000000000000000000000000000167f73ad21460000000000000000000000000000000000000000000000000000000014806100f4575081517fffffffff00000000000000000000000000000000000000000000000000000000167fd8f960c100000000000000000000000000000000000000000000000000000000145b80610141575081517fffffffff00000000000000000000000000000000000000000000000000000000167f973bb64000000000000000000000000000000000000000000000000000000000145b8061018e575081517fffffffff00000000000000000000000000000000000000000000000000000000167f1cdfaa4000000000000000000000000000000000000000000000000000000000145b806101db575081517fffffffff00000000000000000000000000000000000000000000000000000000167f3e6b89d400000000000000000000000000000000000000000000000000000000145b1561029357600083602001518060200190518101906101fa91906103fa565b905060008360200151806020019051810190610216919061041b565b5090508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156102905750506040805180820190915282517fffffffff000000000000000000000000000000000000000000000000000000001681526020808401519082015290506102b7565b50505b50604080518082018252600080825282516020818101909452908152918101919091525b92915050565b60408051808201909152600081526060602082015290565b805173ffffffffffffffffffffffffffffffffffffffff811681146102f957600080fd5b919050565b60006040828403121561030f578081fd5b6040516040810167ffffffffffffffff828210818311171561032d57fe5b81604052829350843591507fffffffff000000000000000000000000000000000000000000000000000000008216821461036657600080fd5b908252602090848201358181111561037d57600080fd5b8501601f8101871361038e57600080fd5b80358281111561039a57fe5b6103ca847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161054c565b925080835287848284010111156103e057600080fd5b808483018585013760009083018401525091015292915050565b60006020828403121561040b578081fd5b610414826102d5565b9392505050565b6000806040838503121561042d578081fd5b610436836102d5565b9150602083015190509250929050565b60008060408385031215610458578182fd5b823567ffffffffffffffff8082111561046f578384fd5b61047b868387016102fe565b93506020850135915080821115610490578283fd5b5061049d858286016102fe565b9150509250929050565b600060208083527fffffffff0000000000000000000000000000000000000000000000000000000084511681840152808401516040808501528051806060860152835b81811015610506578281018401518682016080015283016104ea565b818111156105175784608083880101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01693909301608001949350505050565b60405181810167ffffffffffffffff8111828210171561056857fe5b60405291905056fea2646970667358221220b2ec3e4041f37bcc696a3b9a321a4345863196a9e27fce237de190c0b0aca75b64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}