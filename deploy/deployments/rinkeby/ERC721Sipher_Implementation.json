{
  "address": "0x7bC597F5f00EA639DCb487F8BEF5c2694Cf48039",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "CreateERC721Sipher",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct LibPart.Part[]",
          "name": "creators",
          "type": "tuple[]"
        }
      ],
      "name": "Creators",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "hasApproval",
          "type": "bool"
        }
      ],
      "name": "DefaultApproval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct LibPart.Part[]",
          "name": "royalties",
          "type": "tuple[]"
        }
      ],
      "name": "RoyaltiesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contractURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "transferProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lazyTransferProxy",
          "type": "address"
        }
      ],
      "name": "__ERC721Sipher_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getCreators",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getSipherV2Royalties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "value",
                  "type": "uint96"
                }
              ],
              "internalType": "struct LibPart.Part[]",
              "name": "creators",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "value",
                  "type": "uint96"
                }
              ],
              "internalType": "struct LibPart.Part[]",
              "name": "royalties",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes[]",
              "name": "signatures",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct LibERC721LazyMint.Mint721Data",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintAndTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "value",
                  "type": "uint96"
                }
              ],
              "internalType": "struct LibPart.Part[]",
              "name": "creators",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "value",
                  "type": "uint96"
                }
              ],
              "internalType": "struct LibPart.Part[]",
              "name": "royalties",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes[]",
              "name": "signatures",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct LibERC721LazyMint.Mint721Data",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferFromOrMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "updateAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x32283afae0ca7a684cc5496bea555a61fb4ea8f27c13b75ff511efe4040279a9",
  "receipt": {
    "to": null,
    "from": "0xB6B61613268921913A5c01dF94D21D4de34e84cE",
    "contractAddress": "0x7bC597F5f00EA639DCb487F8BEF5c2694Cf48039",
    "transactionIndex": 30,
    "gasUsed": "4681069",
    "logsBloom": "0x
    "blockHash": "0x8ebb1fc24a0c2bb2dfc61610cea6243060a0767e35d285eeda627298c53e01a1",
    "transactionHash": "0x32283afae0ca7a684cc5496bea555a61fb4ea8f27c13b75ff511efe4040279a9",
    "logs": [],
    "blockNumber": 10227783,
    "cumulativeGasUsed": "17648661",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "486fac33c11fdad45a5597b727ee6185",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"CreateERC721Sipher\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LibPart.Part[]\",\"name\":\"creators\",\"type\":\"tuple[]\"}],\"name\":\"Creators\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasApproval\",\"type\":\"bool\"}],\"name\":\"DefaultApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"RoyaltiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"transferProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lazyTransferProxy\",\"type\":\"address\"}],\"name\":\"__ERC721Sipher_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCreators\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSipherV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"creators\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"internalType\":\"struct LibERC721LazyMint.Mint721Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"creators\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"internalType\":\"struct LibERC721LazyMint.Mint721Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferFromOrMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"updateAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sipher/tokens/contracts/erc-721/ERC721Sipher.sol\":\"ERC721Sipher\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":22000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6cd0bc8c149150614ca3d4a3d3d21f844a0ab3032625f34fcfcf1c2c8b351638\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc6dbbc2f50a7c104377798a37b2acd1a41c1242544b0bb7a9a7c863f0520eb50\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x529f3ab127aace61d7d47f3df7a6a2c42dc79bbb3a0ca459d6a861f33698aee6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa981b1f67f60771c18d39e21bad0a2f0f952e2c3faa90b45b982060fc14ee2bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x53552243cd7de0d57a876cbaee3485d4bdc2b1c7d58ff15447cd623a3ddb5cd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/EnumerableMapUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMapUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x6a8e34d051fc71ce49a8a47d050c5b7e77909008c6be7d6780ee9ed87d2d3797\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x20714cf126a1a984613579156d3cbc726db8025d8400e1db1d2bb714edaba335\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x8d1ac29b8a8ed3cfebe5d8774b465441ae8931aaca549f84408e0b29a1191964\",\"license\":\"MIT\"},\"@sipher/lazy-mint/contracts/erc-721/IERC721LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"./LibERC721LazyMint.sol\\\";\\nimport \\\"@sipher/royalties/contracts/LibPart.sol\\\";\\n\\ninterface IERC721LazyMint is IERC721Upgradeable {\\n\\n    event Creators(\\n        uint256 tokenId,\\n        LibPart.Part[] creators\\n    );\\n\\n    function mintAndTransfer(\\n        LibERC721LazyMint.Mint721Data memory data,\\n        address to\\n    ) external;\\n\\n    function transferFromOrMint(\\n        LibERC721LazyMint.Mint721Data memory data,\\n        address from,\\n        address to\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd94f194c1eb89b08bbdd2bd52f883aba831acfb602931a82f633249ea5d3c494\",\"license\":\"MIT\"},\"@sipher/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@sipher/royalties/contracts/LibPart.sol\\\";\\n\\nlibrary LibERC721LazyMint {\\n    bytes4 constant public ERC721_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC721_LAZY\\\"));\\n    bytes4 constant _INTERFACE_ID_MINT_AND_TRANSFER = 0x8486f69f;\\n\\n    struct Mint721Data {\\n        uint tokenId;\\n        string tokenURI;\\n        LibPart.Part[] creators;\\n        LibPart.Part[] royalties;\\n        bytes[] signatures;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH = keccak256(\\\"Mint721(uint256 tokenId,string tokenURI,Part[] creators,Part[] royalties)Part(address account,uint96 value)\\\");\\n\\n    function hash(Mint721Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        for (uint i = 0; i < data.royalties.length; i++) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        bytes32[] memory creatorsBytes = new bytes32[](data.creators.length);\\n        for (uint i = 0; i < data.creators.length; i++) {\\n            creatorsBytes[i] = LibPart.hash(data.creators[i]);\\n        }\\n        return keccak256(abi.encode(\\n                MINT_AND_TRANSFER_TYPEHASH,\\n                data.tokenId,\\n                keccak256(bytes(data.tokenURI)),\\n                keccak256(abi.encodePacked(creatorsBytes)),\\n                keccak256(abi.encodePacked(royaltiesBytes))\\n            ));\\n    }\\n\\n}\\n\",\"keccak256\":\"0xbae12d4057dca10311809da60977dc654e979e9e6174a743e384559883ce1f20\",\"license\":\"MIT\"},\"@sipher/libraries/contracts/LibSignature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nlibrary LibSignature {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        // v > 30 is a special case, we need to adjust hash with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n        // and v = v - 4\\n        address signer;\\n        if (v > 30) {\\n            require(\\n                v - 4 == 27 || v - 4 == 28,\\n                \\\"ECDSA: invalid signature 'v' value\\\"\\n            );\\n            signer = ecrecover(toEthSignedMessageHash(hash), v - 4, r, s);\\n        } else {\\n            require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n            signer = ecrecover(hash, v, r, s);\\n        }\\n\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x7a5583247b42c05cd0e592a870755c9b7bba3f2141f6e0dd1a123af504372237\",\"license\":\"MIT\"},\"@sipher/royalties-upgradeable/contracts/RoyaltiesV2Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@sipher/royalties/contracts/LibRoyaltiesV2.sol\\\";\\nimport \\\"@sipher/royalties/contracts/RoyaltiesV2.sol\\\";\\n\\nabstract contract RoyaltiesV2Upgradeable is ERC165Upgradeable, RoyaltiesV2 {\\n    function __RoyaltiesV2Upgradeable_init_unchained() internal initializer {\\n        _registerInterface(LibRoyaltiesV2._INTERFACE_ID_ROYALTIES);\\n    }\\n}\\n\",\"keccak256\":\"0x49aa7b2a50e83ba6e99cc830a9f41f81a438ad1045bf7a258203d2076a1d0310\",\"license\":\"MIT\"},\"@sipher/royalties/contracts/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\nimport \\\"./LibPart.sol\\\";\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\n//interface IERC2981 is IERC165 {\\ninterface IERC2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(\\n        uint256 _tokenId,\\n        uint256 _salePrice\\n    ) external view returns (\\n        address receiver,\\n        uint256 royaltyAmount\\n    );\\n}\",\"keccak256\":\"0x3fb47b0b754d2ff59c54abb7a25a6daa788b7b43ba574388186d06918f06b722\",\"license\":\"MIT\"},\"@sipher/royalties/contracts/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xd0123f7411573a6a7e1527e0d3901913d7642e504ff240d5b7c5b76a28587def\",\"license\":\"MIT\"},\"@sipher/royalties/contracts/LibRoyalties2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibRoyalties2981 {\\n    /*\\n     * https://eips.ethereum.org/EIPS/eip-2981: bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n     */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0x2a55205a;\\n    uint96 constant _WEIGHT_VALUE = 1000000;\\n\\n    /*Method for converting amount to percent and forming LibPart*/\\n    function calculateRoyalties(address to, uint256 amount) internal view returns (LibPart.Part[] memory) {\\n        LibPart.Part[] memory result;\\n        if (amount == 0) {\\n            return result;\\n        }\\n        uint256 percent = (amount * 100 / _WEIGHT_VALUE) * 100;\\n        require(percent < 10000, \\\"Royalties 2981, than 100%\\\");\\n        result = new LibPart.Part[](1);\\n        result[0].account = payable(to);\\n        result[0].value = uint96(percent);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd5eee6b0d73e5f0496fbf205057e6946b7abf920d21858d258c66ab4757c096e\",\"license\":\"MIT\"},\"@sipher/royalties/contracts/LibRoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibRoyaltiesV2 {\\n    /*\\n     * bytes4(keccak256('getSipherV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\\n}\\n\",\"keccak256\":\"0xce655777056195dc0a480e57c917d4efc07c804a4ec089ba2f606245501963ac\",\"license\":\"MIT\"},\"@sipher/royalties/contracts/RoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\ninterface RoyaltiesV2 {\\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\\n\\n    function getSipherV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0x7f984a5f1e254f18aa5288ee0c56adc3cda635f1dee9e4d9480ac529eeec6b75\",\"license\":\"MIT\"},\"@sipher/royalties/contracts/impl/AbstractRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../LibPart.sol\\\";\\n\\nabstract contract AbstractRoyalties {\\n    mapping (uint256 => LibPart.Part[]) internal royalties;\\n\\n    function _saveRoyalties(uint256 id, LibPart.Part[] memory _royalties) internal {\\n        uint256 totalValue;\\n        for (uint i = 0; i < _royalties.length; i++) {\\n            require(_royalties[i].account != address(0x0), \\\"Recipient should be present\\\");\\n            require(_royalties[i].value != 0, \\\"Royalty value should be positive\\\");\\n            totalValue += _royalties[i].value;\\n            royalties[id].push(_royalties[i]);\\n        }\\n        require(totalValue < 10000, \\\"Royalty total value should be < 10000\\\");\\n        _onRoyaltiesSet(id, _royalties);\\n    }\\n\\n    function _updateAccount(uint256 _id, address _from, address _to) internal {\\n        uint length = royalties[_id].length;\\n        for(uint i = 0; i < length; i++) {\\n            if (royalties[_id][i].account == _from) {\\n                royalties[_id][i].account = address(uint160(_to));\\n            }\\n        }\\n    }\\n\\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) virtual internal;\\n}\\n\",\"keccak256\":\"0x65840b8ea3e8b4f770933a18bde01f03efd5a85927ba16fe82fea687a7fa0834\",\"license\":\"MIT\"},\"@sipher/royalties/contracts/impl/RoyaltiesV2Impl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AbstractRoyalties.sol\\\";\\nimport \\\"../RoyaltiesV2.sol\\\";\\nimport \\\"../IERC2981.sol\\\";\\nimport \\\"../LibRoyalties2981.sol\\\";\\n\\ncontract RoyaltiesV2Impl is AbstractRoyalties, RoyaltiesV2, IERC2981 {\\n\\n    function getSipherV2Royalties(uint256 id) override external view returns (LibPart.Part[] memory) {\\n        return royalties[id];\\n    }\\n\\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) override internal {\\n        emit RoyaltiesSet(id, _royalties);\\n    }\\n\\n    /*\\n    *Token (ERC721, ERC721Minimal, ERC721MinimalMeta, ERC1155 ) can have a number of different royalties beneficiaries\\n    *calculate sum all royalties, but royalties beneficiary will be only one royalties[0].account, according to rules of IERC2981\\n    */\\n    function royaltyInfo(uint256 id, uint256 _salePrice) override external view returns (address receiver, uint256 royaltyAmount) {\\n        if (royalties[id].length == 0) {\\n            receiver = address(0);\\n            royaltyAmount = 0;\\n            return(receiver, royaltyAmount);\\n        }\\n        LibPart.Part[] memory _royalties = royalties[id];\\n        receiver = _royalties[0].account;\\n        uint percent;\\n        for (uint i = 0; i < _royalties.length; i++) {\\n            percent += _royalties[i].value;\\n        }\\n        //don`t need require(percent < 10000, \\\"Token royalty > 100%\\\"); here, because check later in calculateRoyalties\\n        royaltyAmount = percent * _salePrice / 10000;\\n    }\\n}\\n\",\"keccak256\":\"0x82deb14b043be2d1241848d07ef266f2cc66172a787e6c9c797159c56fe8f6bb\",\"license\":\"MIT\"},\"@sipher/tokens/contracts/HasContractURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\n\\nabstract contract HasContractURI is ERC165Upgradeable {\\n\\n    string public contractURI;\\n\\n    /*\\n     * bytes4(keccak256('contractURI()')) == 0xe8a3d485\\n     */\\n    bytes4 private constant _INTERFACE_ID_CONTRACT_URI = 0xe8a3d485;\\n\\n    function __HasContractURI_init_unchained(string memory _contractURI) internal initializer {\\n        contractURI = _contractURI;\\n        _registerInterface(_INTERFACE_ID_CONTRACT_URI);\\n    }\\n\\n    /**\\n     * @dev Internal function to set the contract URI\\n     * @param _contractURI string URI prefix to assign\\n     */\\n    function _setContractURI(string memory _contractURI) internal {\\n        contractURI = _contractURI;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3c7253e5d93ae74f4a010f612f7078682877d4590ef2e09780a5d14d08b3e224\",\"license\":\"MIT\"},\"@sipher/tokens/contracts/LibURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nlibrary LibURI {\\n    /// @dev checks if _tokenURI starts with base. if true returns _tokenURI, else base + _tokenURI\\n    function checkPrefix(string memory base, string memory _tokenURI)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory whatBytes = bytes(base);\\n        bytes memory whereBytes = bytes(_tokenURI);\\n\\n        if (whatBytes.length > whereBytes.length) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        for (uint256 j = 0; j < whatBytes.length; j++) {\\n            if (whereBytes[j] != whatBytes[j]) {\\n                return string(abi.encodePacked(base, _tokenURI));\\n            }\\n        }\\n\\n        return _tokenURI;\\n    }\\n}\\n\",\"keccak256\":\"0x2ad5368bf0c2398366f813ae7ced6342a819a6ec207d346df10f11fa143c21af\",\"license\":\"MIT\"},\"@sipher/tokens/contracts/Mint721Validator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./erc-1271/ERC1271Validator.sol\\\";\\nimport \\\"@sipher/lazy-mint/contracts/erc-721/LibERC721LazyMint.sol\\\";\\n\\ncontract Mint721Validator is ERC1271Validator {\\n    function __Mint721Validator_init_unchained() internal initializer {\\n        __EIP712_init_unchained(\\\"Mint721\\\", \\\"1\\\");\\n    }\\n\\n    function validate(address account, bytes32 hash, bytes memory signature) internal view {\\n        validate1271(account, hash, signature);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xf26b3f995f5597a365fce6aff7b30b5d6900ec97ede418e6f3cbe26195887c1b\",\"license\":\"MIT\"},\"@sipher/tokens/contracts/erc-1271/ERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nabstract contract ERC1271 {\\n    bytes4 constant public ERC1271_INTERFACE_ID = 0xfb855dc9; // this.isValidSignature.selector\\n\\n    bytes4 constant public ERC1271_RETURN_VALID_SIGNATURE =   0x1626ba7e;\\n    bytes4 constant public ERC1271_RETURN_INVALID_SIGNATURE = 0x00000000;\\n\\n    /**\\n    * @dev Function must be implemented by deriving contract\\n    * @param _hash Arbitrary length data signed on the behalf of address(this)\\n    * @param _signature Signature byte array associated with _data\\n    * @return A bytes4 magic value 0x1626ba7e if the signature check passes, 0x00000000 if not\\n    *\\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    * MUST allow external calls\\n    */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public virtual view returns (bytes4);\\n\\n    function returnIsValidSignatureMagicNumber(bool isValid) internal pure returns (bytes4) {\\n        return isValid ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\\n    }\\n}\",\"keccak256\":\"0xc28d1c48e7da71d46b3578ac4669e36c1bfad910d4dd4bd6da0c1e950d1f5f01\",\"license\":\"MIT\"},\"@sipher/tokens/contracts/erc-1271/ERC1271Validator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./ERC1271.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\\\";\\nimport \\\"@sipher/libraries/contracts/LibSignature.sol\\\";\\n\\nabstract contract ERC1271Validator is EIP712Upgradeable {\\n    using AddressUpgradeable for address;\\n    using LibSignature for bytes32;\\n\\n    string constant SIGNATURE_ERROR = \\\"signature verification error\\\";\\n    bytes4 constant internal MAGICVALUE = 0x1626ba7e;\\n\\n    function validate1271(address signer, bytes32 structHash, bytes memory signature) internal view {\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signerFromSig;\\n        if (signature.length == 65) {\\n            signerFromSig = hash.recover(signature);\\n        }\\n        if  (signerFromSig != signer) {\\n            if (signer.isContract()) {\\n                require(\\n                    ERC1271(signer).isValidSignature(hash, signature) == MAGICVALUE,\\n                    SIGNATURE_ERROR\\n                );\\n            } else {\\n                revert(SIGNATURE_ERROR);\\n            }\\n        }\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7df905f1fdba46896a1e557cb4def85a8b97d25df8068fe2c61d6397a98d63ed\",\"license\":\"MIT\"},\"@sipher/tokens/contracts/erc-721/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./ERC721BurnableUpgradeable.sol\\\";\\nimport \\\"./ERC721DefaultApproval.sol\\\";\\nimport \\\"./ERC721Lazy.sol\\\";\\nimport \\\"../HasContractURI.sol\\\";\\n\\nabstract contract ERC721Base is OwnableUpgradeable, ERC721DefaultApproval, ERC721BurnableUpgradeable, ERC721Lazy, HasContractURI {\\n\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal virtual override(ERC721Upgradeable, ERC721DefaultApproval) view returns (bool) {\\n        return ERC721DefaultApproval._isApprovedOrOwner(spender, tokenId);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view virtual override(ERC721DefaultApproval, ERC721Upgradeable, IERC721Upgradeable) returns (bool) {\\n        return ERC721DefaultApproval.isApprovedForAll(owner, operator);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, ERC721Lazy) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal override(ERC721Lazy, ERC721Upgradeable) {\\n        super._mint(to, tokenId);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x70d25879d55ad6a46b9ece38b3f8b2d6ad3b9bb97616d22b995fb35d9c0fb03f\",\"license\":\"MIT\"},\"@sipher/tokens/contracts/erc-721/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"./ERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Burnable_init_unchained();\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        if(!_exists(tokenId)) {\\n            address owner = address(tokenId >> 96);\\n            require(owner == _msgSender(), \\\"ERC721Burnable: caller is not owner, not burn\\\");\\n            _setBurned(tokenId);\\n        } else {\\n            //solhint-disable-next-line max-line-length\\n            require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n            _burn(tokenId);\\n        }\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xf87f9fe8aa4b3789371cdcff86c29fb85813fc91bfda750ee5981d8abee11041\",\"license\":\"MIT\"},\"@sipher/tokens/contracts/erc-721/ERC721DefaultApproval.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./ERC721Upgradeable.sol\\\";\\n\\nabstract contract ERC721DefaultApproval is ERC721Upgradeable {\\n    mapping(address => bool) private defaultApprovals;\\n\\n    event DefaultApproval(address indexed operator, bool hasApproval);\\n\\n    function _setDefaultApproval(address operator, bool hasApproval) internal {\\n        defaultApprovals[operator] = hasApproval;\\n        emit DefaultApproval(operator, hasApproval);\\n    }\\n\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal virtual override view returns (bool) {\\n        return defaultApprovals[spender] || super._isApprovedOrOwner(spender, tokenId);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return defaultApprovals[operator] || super.isApprovedForAll(owner, operator);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xfc52c7e18bdc4c117025915f85230d0995701d8c4dfc9a781c65e59ea655cc32\",\"license\":\"MIT\"},\"@sipher/tokens/contracts/erc-721/ERC721Lazy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./ERC721Upgradeable.sol\\\";\\nimport \\\"@sipher/royalties/contracts/impl/RoyaltiesV2Impl.sol\\\";\\nimport \\\"@sipher/royalties-upgradeable/contracts/RoyaltiesV2Upgradeable.sol\\\";\\nimport \\\"@sipher/lazy-mint/contracts/erc-721/IERC721LazyMint.sol\\\";\\nimport \\\"../Mint721Validator.sol\\\";\\n\\nabstract contract ERC721Lazy is IERC721LazyMint, ERC721Upgradeable, Mint721Validator, RoyaltiesV2Upgradeable, RoyaltiesV2Impl {\\n    using SafeMathUpgradeable for uint;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    using EnumerableMapUpgradeable for EnumerableMapUpgradeable.UintToAddressMap;\\n\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    // tokenId => creators\\n    mapping(uint256 => LibPart.Part[]) private creators;\\n\\n    function __ERC721Lazy_init_unchained() internal initializer {\\n\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == LibERC721LazyMint._INTERFACE_ID_MINT_AND_TRANSFER\\n        || interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES\\n        || interfaceId == LibRoyalties2981._INTERFACE_ID_ROYALTIES\\n        || interfaceId == _INTERFACE_ID_ERC165\\n        || interfaceId == _INTERFACE_ID_ERC721\\n        || interfaceId == _INTERFACE_ID_ERC721_METADATA\\n        || interfaceId == _INTERFACE_ID_ERC721_ENUMERABLE;\\n    }\\n\\n    function transferFromOrMint(\\n        LibERC721LazyMint.Mint721Data memory data,\\n        address from,\\n        address to\\n    ) override external {\\n        if (_exists(data.tokenId)) {\\n            safeTransferFrom(from, to, data.tokenId);\\n        } else {\\n            mintAndTransfer(data, to);\\n        }\\n    }\\n\\n    function mintAndTransfer(LibERC721LazyMint.Mint721Data memory data, address to) public override virtual {\\n        address minter = address(data.tokenId >> 96);\\n        address sender = _msgSender();\\n\\n        require(minter == data.creators[0].account, \\\"tokenId incorrect\\\");\\n        require(data.creators.length == data.signatures.length);\\n        require(minter == sender || isApprovedForAll(minter, sender), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        bytes32 hash = LibERC721LazyMint.hash(data);\\n        for (uint i = 0; i < data.creators.length; i++) {\\n            address creator = data.creators[i].account;\\n            if (creator != sender) {\\n                validate(creator, hash, data.signatures[i]);\\n            }\\n        }\\n\\n        _safeMint(to, data.tokenId);\\n        _saveRoyalties(data.tokenId, data.royalties);\\n        _saveCreators(data.tokenId, data.creators);\\n        _setTokenURI(data.tokenId, data.tokenURI);\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal virtual override {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_burned(tokenId), \\\"token already burned\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        address minter = address(tokenId >> 96);\\n        if (minter != to) {\\n            emit Transfer(address(0), minter, tokenId);\\n            emit Transfer(minter, to, tokenId);\\n        } else {\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    function _saveCreators(uint tokenId, LibPart.Part[] memory _creators) internal {\\n        LibPart.Part[] storage creatorsOfToken = creators[tokenId];\\n        uint total = 0;\\n        for (uint i = 0; i < _creators.length; i++) {\\n            require(_creators[i].account != address(0x0), \\\"Account should be present\\\");\\n            require(_creators[i].value != 0, \\\"Creator share should be positive\\\");\\n            creatorsOfToken.push(_creators[i]);\\n            total = total.add(_creators[i].value);\\n        }\\n        require(total == 10000, \\\"total amount of creators share should be 10000\\\");\\n        emit Creators(tokenId, _creators);\\n    }\\n\\n    function updateAccount(uint256 _id, address _from, address _to) external {\\n        require(_msgSender() == _from, \\\"not allowed\\\");\\n        super._updateAccount(_id, _from, _to);\\n    }\\n\\n    function getCreators(uint256 _id) external view returns (LibPart.Part[] memory) {\\n        return creators[_id];\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8d1a9127f36e1dc26b1ee031ea8d000d2960444910786bd19273036ce349ba9e\",\"license\":\"MIT\"},\"@sipher/tokens/contracts/erc-721/ERC721Sipher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./ERC721Base.sol\\\";\\n\\ncontract ERC721Sipher is ERC721Base {\\n\\n    event CreateERC721Sipher(address owner, string name, string symbol);\\n\\n    function __ERC721Sipher_init(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address transferProxy, address lazyTransferProxy) external initializer {\\n        __ERC721Sipher_init_unchained(_name, _symbol, baseURI, contractURI, transferProxy, lazyTransferProxy);\\n        emit CreateERC721Sipher(_msgSender(), _name, _symbol);\\n    }\\n\\n    function __ERC721Sipher_init_unchained(string memory _name, string memory _symbol, string memory baseURI, string memory contractURI, address transferProxy, address lazyTransferProxy) internal {\\n        _setBaseURI(baseURI);\\n        __ERC721Lazy_init_unchained();\\n        __RoyaltiesV2Upgradeable_init_unchained();\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __Ownable_init_unchained();\\n        __ERC721Burnable_init_unchained();\\n        __Mint721Validator_init_unchained();\\n        __HasContractURI_init_unchained(contractURI);\\n        __ERC721_init_unchained(_name, _symbol);\\n\\n        //setting default approver for transferProxies\\n        _setDefaultApproval(transferProxy, true);\\n        _setDefaultApproval(lazyTransferProxy, true);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xef2cd20709ba982ef3ce1a05132265def4107a66d0c8f1cb7f7a94d96d81d0ba\",\"license\":\"MIT\"},\"@sipher/tokens/contracts/erc-721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/EnumerableMapUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"../LibURI.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable, IERC721EnumerableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    using EnumerableMapUpgradeable for EnumerableMapUpgradeable.UintToAddressMap;\\n    using StringsUpgradeable for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSetUpgradeable.UintSet) _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMapUpgradeable.UintToAddressMap _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    // Mapping from token ID to flag == true, means token already burned\\n    mapping(uint256 => bool) private _burnedTokens;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return LibURI.checkPrefix(base, _tokenURI);\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721Upgradeable.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721Upgradeable.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_burnedTokens[tokenId], \\\"token already burned\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n        _setBurned(tokenId);\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /*Returns true if token with tokenId already burned*/\\n    function _burned(uint256 tokenId) internal returns (bool) {\\n        return _burnedTokens[tokenId];\\n    }\\n\\n    /*Set token with tokenId burned*/\\n    function _setBurned(uint256 tokenId) internal {\\n        _burnedTokens[tokenId] = true;\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721ReceiverUpgradeable(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n    uint256[40] private __gap;\\n}\\n\",\"keccak256\":\"0x1dfb9eb54cacd40bd4eaf143219884542b86f4c16990a5c561ddc9c3d8281b49\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506153f7806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636352211e1161010457806395d89b41116100a2578063e07f231911610071578063e07f2319146103c7578063e8a3d485146103da578063e985e9c5146103e2578063f2fde38b146103f5576101cf565b806395d89b4114610386578063a22cb4651461038e578063b88d4fde146103a1578063c87b56dd146103b4576101cf565b8063715018a6116100de578063715018a614610350578063832fbb2914610358578063891be9741461036b5780638da5cb5b1461037e576101cf565b80636352211e146103225780636c0360eb1461033557806370a082311461033d576101cf565b806323b872dd1161017157806337ed5d761161014b57806337ed5d76146102d657806342842e0e146102e957806342966c68146102fc5780634f6ccce71461030f576101cf565b806323b872dd1461028f5780632a55205a146102a25780632f745c59146102c3576101cf565b8063083d99bb116101ad578063083d99bb14610232578063095ea7b31461025257806318160ddd1461026757806322a775b61461027c576101cf565b806301ffc9a7146101d457806306fdde03146101fd578063081812fc14610212575b600080fd5b6101e76101e23660046149d8565b610408565b6040516101f49190614d53565b60405180910390f35b61020561041b565b6040516101f49190614d5e565b610225610220366004614b87565b6104b1565b6040516101f49190614cb8565b610245610240366004614b87565b610520565b6040516101f49190614d40565b6102656102603660046149ad565b6105d3565b005b61026f6106e2565b6040516101f49190614fa8565b61026561028a366004614ae0565b6106f3565b61026561029d3660046148d2565b6108cc565b6102b56102b0366004614bc5565b610923565b6040516101f4929190614d1a565b61026f6102d13660046149ad565b610a5b565b6102656102e4366004614a18565b610a93565b6102656102f73660046148d2565b610b8b565b61026561030a366004614b87565b610ba6565b61026f61031d366004614b87565b610c8a565b610225610330366004614b87565b610ca0565b610205610cc8565b61026f61034b36600461487e565b610d29565b610265610dab565b610265610366366004614b25565b610ea8565b610245610379366004614b87565b610ed6565b610225610f74565b610205610f90565b61026561039c36600461497c565b610ff1565b6102656103af366004614912565b61112a565b6102056103c2366004614b87565b611188565b6102656103d5366004614b9f565b61139e565b6102056113fb565b6101e76103f036600461489a565b61148a565b61026561040336600461487e565b611496565b600061041382611604565b90505b919050565b609c8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104a75780601f1061047c576101008083540402835291602001916104a7565b820191906000526020600020905b81548152906001019060200180831161048a57829003601f168201915b5050505050905090565b60006104bc82611815565b6104f75760405162461bcd60e51b815260040180806020018281038252602c81526020018061526b602c913960400191505060405180910390fd5b506000908152609a602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60606101c66000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156105c8576000848152602090819020604080518082019091529084015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1681830152825260019092019101610556565b505050509050919050565b60006105de82610ca0565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561064b5760405162461bcd60e51b815260040180806020018281038252602181526020018061531b6021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661066a611822565b73ffffffffffffffffffffffffffffffffffffffff161480610698575061069881610693611822565b611826565b6106d35760405162461bcd60e51b81526004018080602001828103825260388152602001806151416038913960400191505060405180910390fd5b6106dd8383611861565b505050565b60006106ee6098611901565b905090565b815160601c6000610702611822565b9050836040015160008151811061071557fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146107745760405162461bcd60e51b815260040161076b90614ddd565b60405180910390fd5b8360800151518460400151511461078a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806107c957506107c9828261148a565b6107e55760405162461bcd60e51b815260040161076b90614eb7565b60006107f08561190c565b905060005b8560400151518110156108805760008660400151828151811061081457fe5b60200260200101516000015190508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108775761087781848960800151858151811061086a57fe5b6020026020010151611b55565b506001016107f5565b5061088f848660000151611b60565b6108a185600001518660600151611b7e565b6108b385600001518660400151611dcc565b6108c585600001518660200151611fda565b5050505050565b6108dd6108d7611822565b8261203d565b6109185760405162461bcd60e51b815260040180806020018281038252603181526020018061533c6031913960400191505060405180910390fd5b6106dd838383612049565b60008281526101c66020526040812054819061094457506000905080610a54565b60008481526101c66020908152604080832080548251818502810185019093528083529192909190849084015b828210156109e3576000848152602090819020604080518082019091529084015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1681830152825260019092019101610971565b505050509050806000815181106109f657fe5b60209081029190910101515192506000805b8251811015610a4857828181518110610a1d57fe5b6020026020010151602001516bffffffffffffffffffffffff16820191508080600101915050610a08565b50612710908502049150505b9250929050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152609760205260408120610a8a90836121f0565b90505b92915050565b600054610100900460ff1680610aac5750610aac6121fc565b80610aba575060005460ff16155b610af55760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff16158015610b20576000805460ff1961ff0019909116610100171660011790555b610b2e87878787878761220d565b7f1c82072046345795ece476153b70942e74da1b15d7977faabb077e8cad76d8b2610b57611822565b8888604051610b6893929190614cd9565b60405180910390a18015610b82576000805461ff00191690555b50505050505050565b6106dd8383836040518060200160405280600081525061112a565b610baf81611815565b610c3857606081901c610bc0611822565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c295760405162461bcd60e51b815260040180806020018281038252602d81526020018061523e602d913960400191505060405180910390fd5b610c328261227f565b50610c87565b610c436108d7611822565b610c7e5760405162461bcd60e51b81526004018080602001828103825260308152602001806153926030913960400191505060405180910390fd5b610c878161229a565b50565b600080610c9860988461238a565b509392505050565b6000610413826040518060600160405280602981526020016151a360299139609891906123a6565b609f8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104a75780601f1061047c576101008083540402835291602001916104a7565b600073ffffffffffffffffffffffffffffffffffffffff8216610d7d5760405162461bcd60e51b815260040180806020018281038252602a815260200180615179602a913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260976020526040902061041390611901565b610db3611822565b73ffffffffffffffffffffffffffffffffffffffff16610dd1610f74565b73ffffffffffffffffffffffffffffffffffffffff1614610e39576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60335460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b8251610eb390611815565b15610ecc57610ec782828560000151610b8b565b6106dd565b6106dd83826106f3565b60008181526101c7602090815260408083208054825181850281018501909352808352606094929391929091840182156105c8576000848152602090819020604080518082019091529084015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1681830152825260019092019101610556565b60335473ffffffffffffffffffffffffffffffffffffffff1690565b609d8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104a75780601f1061047c576101008083540402835291602001916104a7565b610ff9611822565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611079576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b80609b6000611086611822565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556110d7611822565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b61113b611135611822565b8361203d565b6111765760405162461bcd60e51b815260040180806020018281038252603181526020018061533c6031913960400191505060405180910390fd5b611182848484846123bd565b50505050565b606061119382611815565b6111ce5760405162461bcd60e51b815260040180806020018281038252602f8152602001806152ec602f913960400191505060405180910390fd5b6000828152609e602090815260408083208054825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152929091908301828280156112615780601f1061123657610100808354040283529160200191611261565b820191906000526020600020905b81548152906001019060200180831161124457829003601f168201915b505050505090506000611272610cc8565b905080516000141561128657509050610416565b8151156112a057611297818361240f565b92505050610416565b806112aa8561269c565b6040516020018083805190602001908083835b602083106112fa57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016112bd565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b6020831061136057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611323565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050919050565b8173ffffffffffffffffffffffffffffffffffffffff166113bd611822565b73ffffffffffffffffffffffffffffffffffffffff16146113f05760405162461bcd60e51b815260040161076b90614e14565b6106dd8383836127ab565b6101fa805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156114825780601f1061145757610100808354040283529160200191611482565b820191906000526020600020905b81548152906001019060200180831161146557829003601f168201915b505050505081565b6000610a8a8383612896565b61149e611822565b73ffffffffffffffffffffffffffffffffffffffff166114bc610f74565b73ffffffffffffffffffffffffffffffffffffffff1614611524576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166115765760405162461bcd60e51b81526004018080602001828103825260268152602001806150836026913960400191505060405180910390fd5b60335460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f8486f69f00000000000000000000000000000000000000000000000000000000148061169757507fffffffff0000000000000000000000000000000000000000000000000000000082167fcad96cca00000000000000000000000000000000000000000000000000000000145b806116e357507fffffffff0000000000000000000000000000000000000000000000000000000082167f2a55205a00000000000000000000000000000000000000000000000000000000145b8061172f57507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b8061177b57507fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000145b806117c757507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806104135750507fffffffff00000000000000000000000000000000000000000000000000000000167f780e9d63000000000000000000000000000000000000000000000000000000001490565b60006104136098836128cf565b3390565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152609b6020908152604080832093909416825291909152205460ff1690565b6000818152609a6020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915581906118bb82610ca0565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610413826128db565b60008082606001515167ffffffffffffffff8111801561192b57600080fd5b50604051908082528060200260200182016040528015611955578160200160208202803683370190505b50905060005b8360600151518110156119a7576119888460600151828151811061197b57fe5b60200260200101516128df565b82828151811061199457fe5b602090810291909101015260010161195b565b50600083604001515167ffffffffffffffff811180156119c657600080fd5b506040519080825280602002602001820160405280156119f0578160200160208202803683370190505b50905060005b846040015151811015611a3557611a168560400151828151811061197b57fe5b828281518110611a2257fe5b60209081029190910101526001016119f6565b507ff64326045af5fd7e15297ba939f85b550474d3899daa47d2bc1ffbdb9ced344e84600001518560200151805190602001208360405160200180828051906020019060200280838360005b83811015611a99578181015183820152602001611a81565b50505050905001915050604051602081830303815290604052805190602001208560405160200180828051906020019060200280838360005b83811015611aea578181015183820152602001611ad2565b505050509050019150506040516020818303038152906040528051906020012060405160200180868152602001858152602001848152602001838152602001828152602001955050505050506040516020818303038152906040528051906020012092505050919050565b6106dd83838361295e565b611b7a828260405180602001604052806000815250612c42565b5050565b6000805b8251811015611d8157600073ffffffffffffffffffffffffffffffffffffffff16838281518110611baf57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415611c24576040805162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e740000000000604482015290519081900360640190fd5b828181518110611c3057fe5b6020026020010151602001516bffffffffffffffffffffffff1660001415611c9f576040805162461bcd60e51b815260206004820181905260248201527f526f79616c74792076616c75652073686f756c6420626520706f736974697665604482015290519081900360640190fd5b828181518110611cab57fe5b6020026020010151602001516bffffffffffffffffffffffff16820191506101c66000858152602001908152602001600020838281518110611ce957fe5b60209081029190910181015182546001818101855560009485529383902082519101805492909301516bffffffffffffffffffffffff16740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffffffffffffff0000000000000000000000000000000000000000909316929092171617905501611b82565b506127108110611dc25760405162461bcd60e51b815260040180806020018281038252602581526020018061536d6025913960400191505060405180910390fd5b6106dd8383612c94565b60008281526101c76020526040812090805b8351811015611f7957600073ffffffffffffffffffffffffffffffffffffffff16848281518110611e0b57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415611e4b5760405162461bcd60e51b815260040161076b90614e80565b838181518110611e5757fe5b6020026020010151602001516bffffffffffffffffffffffff1660001415611e915760405162461bcd60e51b815260040161076b90614da8565b82848281518110611e9e57fe5b602090810291909101810151825460018101845560009384529282902081519301805491909201516bffffffffffffffffffffffff16740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216919091179092169190911790558351611f6f90859083908110611f4657fe5b6020026020010151602001516bffffffffffffffffffffffff1683612cd190919063ffffffff16565b9150600101611dde565b508061271014611f9b5760405162461bcd60e51b815260040161076b90614f4b565b7f841ffb90d4cabdd1f16034f3fa831d79060febbb8167bdd54a49269365bdf78f8484604051611fcc929190614fb1565b60405180910390a150505050565b611fe382611815565b61201e5760405162461bcd60e51b815260040180806020018281038252602c815260200180615297602c913960400191505060405180910390fd5b6000828152609e6020908152604090912082516106dd92840190614523565b6000610a8a8383612d2b565b8273ffffffffffffffffffffffffffffffffffffffff1661206982610ca0565b73ffffffffffffffffffffffffffffffffffffffff16146120bb5760405162461bcd60e51b81526004018080602001828103825260298152602001806152c36029913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821661210d5760405162461bcd60e51b81526004018080602001828103825260248152602001806150a96024913960400191505060405180910390fd5b6121188383836106dd565b612123600082611861565b73ffffffffffffffffffffffffffffffffffffffff831660009081526097602052604090206121529082612d64565b5073ffffffffffffffffffffffffffffffffffffffff821660009081526097602052604090206121829082612d70565b5061218f60988284612d7c565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610a8a8383612d9f565b600061220730612e03565b15905090565b61221684612e09565b61221e612e1c565b612226612ebd565b61222e612e1c565b612236612f73565b61223e613029565b612246612e1c565b61224e613147565b61225783613248565b6122618686613328565b61226c82600161346e565b61227781600161346e565b505050505050565b600090815260a060205260409020805460ff19166001179055565b60006122a582610ca0565b90506122b3816000846106dd565b6122be600083611861565b6000828152609e602052604090205460026000196101006001841615020190911604156122fc576000828152609e602052604081206122fc916145af565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260976020526040902061232b9083612d64565b506123376098836134db565b506123418261227f565b604051829060009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600080808061239986866134e7565b9097909650945050505050565b60006123b3848484613562565b90505b9392505050565b6123c8848484612049565b6123d4848484846135ef565b6111825760405162461bcd60e51b81526004018080602001828103825260328152602001806150516032913960400191505060405180910390fd5b805182516060918491849110156125165784846040516020018083805190602001908083835b6020831061247257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612435565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106124d857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161249b565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050610a8d565b60005b82518110156126925782818151811061252e57fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191682828151811061256757fe5b01602001517fff00000000000000000000000000000000000000000000000000000000000000161461268a5785856040516020018083805190602001908083835b602083106125e557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016125a8565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b6020831061264b57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161260e565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529350505050610a8d565b600101612519565b5092949350505050565b6060816126dd575060408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152610416565b8160005b81156126f557600101600a820491506126e1565b60008167ffffffffffffffff8111801561270e57600080fd5b506040519080825280601f01601f191660200182016040528015612739576020820181803683370190505b50859350905060001982015b83156127a257600a840660300160f81b8282806001900393508151811061276857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a84049350612745565b50949350505050565b60008381526101c66020526040812054905b818110156108c55760008581526101c660205260409020805473ffffffffffffffffffffffffffffffffffffffff86169190839081106127f957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16141561288e5760008581526101c66020526040902080548491908390811061283f57fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790555b6001016127bd565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260c9602052604081205460ff1680610a8a5750610a8a8383611826565b6000610a8a8383613800565b5490565b8051602091820151604080517f397e04204c1e1a60ee8724b71f8244e10ab5f2e9009854d80f602bda21b59ebb8186015273ffffffffffffffffffffffffffffffffffffffff909316838201526bffffffffffffffffffffffff9091166060808401919091528151808403909101815260809092019052805191012090565b600061296983613818565b9050600082516041141561298457612981828461387f565b90505b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108c5576129d68573ffffffffffffffffffffffffffffffffffffffff16612e03565b15612bca57604080517f1626ba7e000000000000000000000000000000000000000000000000000000008082526004820185815260248301938452865160448401528651919373ffffffffffffffffffffffffffffffffffffffff8a1693631626ba7e9388938a9390929091606490910190602085019080838360005b83811015612a6b578181015183820152602001612a53565b50505050905090810190601f168015612a985780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015612ab657600080fd5b505afa158015612aca573d6000803e3d6000fd5b505050506040513d6020811015612ae057600080fd5b505160408051808201909152601c81527f7369676e617475726520766572696669636174696f6e206572726f72000000006020820152917fffffffff0000000000000000000000000000000000000000000000000000000090911614612bc45760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b89578181015183820152602001612b71565b50505050905090810190601f168015612bb65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506108c5565b604080518082018252601c81527f7369676e617475726520766572696669636174696f6e206572726f72000000006020808301918252925162461bcd60e51b81526004810193845282516024820152825192939283926044909201919080838360008315612b89578181015183820152602001612b71565b612c4c83836138ff565b612c5960008484846135ef565b6106dd5760405162461bcd60e51b81526004018080602001828103825260328152602001806150516032913960400191505060405180910390fd5b7f3fa96d7b6bcbfe71ef171666d84db3cf52fa2d1c8afdb1cc8e486177f208b7df8282604051612cc5929190614fb1565b60405180910390a15050565b600082820183811015610a8a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260c9602052604081205460ff1680610a8a5750610a8a8383613909565b6000610a8a83836139d9565b6000610a8a8383613a9f565b60006123b3848473ffffffffffffffffffffffffffffffffffffffff8516613ae9565b81546000908210612de15760405162461bcd60e51b815260040180806020018281038252602281526020018061502f6022913960400191505060405180910390fd5b826000018281548110612df057fe5b9060005260206000200154905092915050565b3b151590565b8051611b7a90609f906020840190614523565b600054610100900460ff1680612e355750612e356121fc565b80612e43575060005460ff16155b612e7e5760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff16158015612ea9576000805460ff1961ff0019909116610100171660011790555b8015610c87576000805461ff001916905550565b600054610100900460ff1680612ed65750612ed66121fc565b80612ee4575060005460ff16155b612f1f5760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff16158015612f4a576000805460ff1961ff0019909116610100171660011790555b612ea97fcad96cca00000000000000000000000000000000000000000000000000000000613b80565b600054610100900460ff1680612f8c5750612f8c6121fc565b80612f9a575060005460ff16155b612fd55760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff16158015613000576000805460ff1961ff0019909116610100171660011790555b612ea97f01ffc9a700000000000000000000000000000000000000000000000000000000613b80565b600054610100900460ff168061304257506130426121fc565b80613050575060005460ff16155b61308b5760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff161580156130b6576000805460ff1961ff0019909116610100171660011790555b60006130c0611822565b603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610c87576000805461ff001916905550565b600054610100900460ff168061316057506131606121fc565b8061316e575060005460ff16155b6131a95760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff161580156131d4576000805460ff1961ff0019909116610100171660011790555b612ea96040518060400160405280600781526020017f4d696e74373231000000000000000000000000000000000000000000000000008152506040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250613c34565b600054610100900460ff168061326157506132616121fc565b8061326f575060005460ff16155b6132aa5760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff161580156132d5576000805460ff1961ff0019909116610100171660011790555b81516132e9906101fa906020850190614523565b506133137fe8a3d48500000000000000000000000000000000000000000000000000000000613b80565b8015611b7a576000805461ff00191690555050565b600054610100900460ff168061334157506133416121fc565b8061334f575060005460ff16155b61338a5760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff161580156133b5576000805460ff1961ff0019909116610100171660011790555b82516133c890609c906020860190614523565b5081516133dc90609d906020850190614523565b506134067f80ac58cd00000000000000000000000000000000000000000000000000000000613b80565b61342f7f5b5e139f00000000000000000000000000000000000000000000000000000000613b80565b6134587f780e9d6300000000000000000000000000000000000000000000000000000000613b80565b80156106dd576000805461ff0019169055505050565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260c96020908152604091829020805460ff1916851515908117909155825190815291517f270dbb8ba4292910ae92862466486be25c355c837270a3d8824b36a8bc7c653b9281900390910190a25050565b6000610a8a8383613cf6565b81546000908190831061352b5760405162461bcd60e51b815260040180806020018281038252602281526020018061521c6022913960400191505060405180910390fd5b600084600001848154811061353c57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816135c05760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612b89578181015183820152602001612b71565b508460000160018203815481106135d357fe5b9060005260206000209060020201600101549150509392505050565b60006136108473ffffffffffffffffffffffffffffffffffffffff16612e03565b61361c575060016137f8565b60006137947f150b7a020000000000000000000000000000000000000000000000000000000061364a611822565b888787604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156136cb5781810151838201526020016136b3565b50505050905090810190601f1680156136f85780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518060600160405280603281526020016150516032913973ffffffffffffffffffffffffffffffffffffffff88169190613dca565b905060008180602001905160208110156137ad57600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014925050505b949350505050565b60009081526001919091016020526040902054151590565b6000613822613dd9565b8260405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b600081516041146138d7576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a6138f586828585613e14565b9695505050505050565b611b7a8282614077565b600061391482611815565b61394f5760405162461bcd60e51b815260040180806020018281038252602c815260200180615115602c913960400191505060405180910390fd5b600061395a83610ca0565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806139c957508373ffffffffffffffffffffffffffffffffffffffff166139b1846104b1565b73ffffffffffffffffffffffffffffffffffffffff16145b806137f857506137f88185611826565b60008181526001830160205260408120548015613a955783546000198083019190810190600090879083908110613a0c57fe5b9060005260206000200154905080876000018481548110613a2957fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080613a5957fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610a8d565b6000915050610a8d565b6000613aab8383613800565b613ae157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a8d565b506000610a8d565b600082815260018401602052604081205480613b4e5750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556123b6565b82856000016001830381548110613b6157fe5b90600052602060002090600202016001018190555060009150506123b6565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415613bf7576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152606560205260409020805460ff19166001179055565b600054610100900460ff1680613c4d5750613c4d6121fc565b80613c5b575060005460ff16155b613c965760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff16158015613cc1576000805460ff1961ff0019909116610100171660011790555b825160208085019190912083519184019190912061012e9190915561012f5580156106dd576000805461ff0019169055505050565b60008181526001830160205260408120548015613a955783546000198083019190810190600090879083908110613d2957fe5b9060005260206000209060020201905080876000018481548110613d4957fe5b600091825260208083208454600290930201918255600193840154918401919091558354825289830190526040902090840190558654879080613d8857fe5b6000828152602080822060026000199094019384020182815560019081018390559290935588815289820190925260408220919091559450610a8d9350505050565b60606123b38484600085614250565b60006106ee7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f613e076143d6565b613e0f6143dd565b6143e4565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115613e755760405162461bcd60e51b81526004018080602001828103825260228152602001806150cd6022913960400191505060405180910390fd5b6000601e8560ff161115613f4f576004850360ff16601b1480613e9e57506004850360ff16601c145b613ed95760405162461bcd60e51b81526004018080602001828103825260228152602001806151fa6022913960400191505060405180910390fd5b6001613ee487614453565b60048703868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613f3e573d6000803e3d6000fd5b505050602060405103519050614006565b8460ff16601b1480613f6457508460ff16601c145b613f9f5760405162461bcd60e51b81526004018080602001828103825260228152602001806151fa6022913960400191505060405180910390fd5b60018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613ff9573d6000803e3d6000fd5b5050506020604051035190505b73ffffffffffffffffffffffffffffffffffffffff811661406e576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff82166140aa5760405162461bcd60e51b815260040161076b90614e4b565b6140b3816144a4565b156140d05760405162461bcd60e51b815260040161076b90614f14565b6140d981611815565b156140f65760405162461bcd60e51b815260040161076b90614d71565b614102600083836106dd565b73ffffffffffffffffffffffffffffffffffffffff821660009081526097602052604090206141319082612d70565b5061413e60988284612d7c565b50606081901c73ffffffffffffffffffffffffffffffffffffffff8316811461420657604051829073ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46106dd565b604051829073ffffffffffffffffffffffffffffffffffffffff8516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b6060824710156142915760405162461bcd60e51b81526004018080602001828103825260268152602001806150ef6026913960400191505060405180910390fd5b61429a85612e03565b6142eb576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061435457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614317565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146143b6576040519150601f19603f3d011682016040523d82523d6000602084013e6143bb565b606091505b50915091506143cb8282866144b9565b979650505050505050565b61012e5490565b61012f5490565b60008383836143f161451f565b30604051602001808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b600090815260a0602052604090205460ff1690565b606083156144c85750816123b6565b8251156144d85782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315612b89578181015183820152602001612b71565b4690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282614559576000855561459f565b82601f1061457257805160ff191683800117855561459f565b8280016001018555821561459f579182015b8281111561459f578251825591602001919060010190614584565b506145ab9291506145ef565b5090565b50805460018160011615610100020316600290046000825580601f106145d55750610c87565b601f016020900490600052602060002090810190610c8791905b5b808211156145ab57600081556001016145f0565b80356104168161500c565b600082601f83011261461f578081fd5b8135602061463461462f83614fee565b614fca565b82815281810190858301855b8581101561466957614657898684358b0101614737565b84529284019290840190600101614640565b5090979650505050505050565b600082601f830112614686578081fd5b8135602061469661462f83614fee565b828152818101908583016040808602880185018910156146b4578687fd5b865b868110156147295781838b0312156146cc578788fd5b815182810181811067ffffffffffffffff821117156146e757fe5b835283356146f48161500c565b8152838701356bffffffffffffffffffffffff8116811461471357898afd5b81880152855293850193918101916001016146b6565b509198975050505050505050565b600082601f830112614747578081fd5b813567ffffffffffffffff81111561475b57fe5b61478c60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601614fca565b8181528460208386010111156147a0578283fd5b816020850160208301379081016020019190915292915050565b600060a082840312156147cb578081fd5b6147d560a0614fca565b905081358152602082013567ffffffffffffffff808211156147f657600080fd5b61480285838601614737565b6020840152604084013591508082111561481b57600080fd5b61482785838601614676565b6040840152606084013591508082111561484057600080fd5b61484c85838601614676565b6060840152608084013591508082111561486557600080fd5b506148728482850161460f565b60808301525092915050565b60006020828403121561488f578081fd5b8135610a8a8161500c565b600080604083850312156148ac578081fd5b82356148b78161500c565b915060208301356148c78161500c565b809150509250929050565b6000806000606084860312156148e6578081fd5b83356148f18161500c565b925060208401356149018161500c565b929592945050506040919091013590565b60008060008060808587031215614927578081fd5b84356149328161500c565b935060208501356149428161500c565b925060408501359150606085013567ffffffffffffffff811115614964578182fd5b61497087828801614737565b91505092959194509250565b6000806040838503121561498e578182fd5b82356149998161500c565b9150602083013580151581146148c7578182fd5b600080604083850312156149bf578182fd5b82356149ca8161500c565b946020939093013593505050565b6000602082840312156149e9578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a8a578182fd5b60008060008060008060c08789031215614a30578384fd5b863567ffffffffffffffff80821115614a47578586fd5b614a538a838b01614737565b97506020890135915080821115614a68578586fd5b614a748a838b01614737565b96506040890135915080821115614a89578586fd5b614a958a838b01614737565b95506060890135915080821115614aaa578384fd5b50614ab789828a01614737565b935050614ac660808801614604565b9150614ad460a08801614604565b90509295509295509295565b60008060408385031215614af2578182fd5b823567ffffffffffffffff811115614b08578283fd5b614b14858286016147ba565b92505060208301356148c78161500c565b600080600060608486031215614b39578081fd5b833567ffffffffffffffff811115614b4f578182fd5b614b5b868287016147ba565b9350506020840135614b6c8161500c565b91506040840135614b7c8161500c565b809150509250925092565b600060208284031215614b98578081fd5b5035919050565b600080600060608486031215614bb3578081fd5b833592506020840135614b6c8161500c565b60008060408385031215614bd7578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015614c44578151805173ffffffffffffffffffffffffffffffffffffffff1688528301516bffffffffffffffffffffffff168388015260409096019590820190600101614bf9565b509495945050505050565b60008151808452815b81811015614c7457602081850181015186830182015201614c58565b81811115614c855782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8516825260606020830152614d086060830185614c4f565b82810360408401526138f58185614c4f565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060208252610a8a6020830184614be6565b901515815260200190565b600060208252610a8a6020830184614c4f565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252818101527f43726561746f722073686172652073686f756c6420626520706f736974697665604082015260600190565b60208082526011908201527f746f6b656e496420696e636f7272656374000000000000000000000000000000604082015260600190565b6020808252600b908201527f6e6f7420616c6c6f776564000000000000000000000000000000000000000000604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b60208082526019908201527f4163636f756e742073686f756c642062652070726573656e7400000000000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606082015260800190565b60208082526014908201527f746f6b656e20616c7265616479206275726e6564000000000000000000000000604082015260600190565b6020808252602e908201527f746f74616c20616d6f756e74206f662063726561746f7273207368617265207360408201527f686f756c64206265203130303030000000000000000000000000000000000000606082015260800190565b90815260200190565b6000838252604060208301526123b36040830184614be6565b60405181810167ffffffffffffffff81118282101715614fe657fe5b604052919050565b600067ffffffffffffffff82111561500257fe5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff81168114610c8757600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734552433732313a207472616e7366657220746f20746865207a65726f206164647265737345434453413a20696e76616c6964207369676e6174757265202773272076616c7565416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445434453413a20696e76616c6964207369676e6174757265202776272076616c7565456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e65722c206e6f74206275726e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732314d657461646174613a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564526f79616c747920746f74616c2076616c75652073686f756c64206265203c2031303030304552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a26469706673582212204bbaddee1b0389793b003d2556fa7a907296bd57c25ea0f3b889201318a229b664736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636352211e1161010457806395d89b41116100a2578063e07f231911610071578063e07f2319146103c7578063e8a3d485146103da578063e985e9c5146103e2578063f2fde38b146103f5576101cf565b806395d89b4114610386578063a22cb4651461038e578063b88d4fde146103a1578063c87b56dd146103b4576101cf565b8063715018a6116100de578063715018a614610350578063832fbb2914610358578063891be9741461036b5780638da5cb5b1461037e576101cf565b80636352211e146103225780636c0360eb1461033557806370a082311461033d576101cf565b806323b872dd1161017157806337ed5d761161014b57806337ed5d76146102d657806342842e0e146102e957806342966c68146102fc5780634f6ccce71461030f576101cf565b806323b872dd1461028f5780632a55205a146102a25780632f745c59146102c3576101cf565b8063083d99bb116101ad578063083d99bb14610232578063095ea7b31461025257806318160ddd1461026757806322a775b61461027c576101cf565b806301ffc9a7146101d457806306fdde03146101fd578063081812fc14610212575b600080fd5b6101e76101e23660046149d8565b610408565b6040516101f49190614d53565b60405180910390f35b61020561041b565b6040516101f49190614d5e565b610225610220366004614b87565b6104b1565b6040516101f49190614cb8565b610245610240366004614b87565b610520565b6040516101f49190614d40565b6102656102603660046149ad565b6105d3565b005b61026f6106e2565b6040516101f49190614fa8565b61026561028a366004614ae0565b6106f3565b61026561029d3660046148d2565b6108cc565b6102b56102b0366004614bc5565b610923565b6040516101f4929190614d1a565b61026f6102d13660046149ad565b610a5b565b6102656102e4366004614a18565b610a93565b6102656102f73660046148d2565b610b8b565b61026561030a366004614b87565b610ba6565b61026f61031d366004614b87565b610c8a565b610225610330366004614b87565b610ca0565b610205610cc8565b61026f61034b36600461487e565b610d29565b610265610dab565b610265610366366004614b25565b610ea8565b610245610379366004614b87565b610ed6565b610225610f74565b610205610f90565b61026561039c36600461497c565b610ff1565b6102656103af366004614912565b61112a565b6102056103c2366004614b87565b611188565b6102656103d5366004614b9f565b61139e565b6102056113fb565b6101e76103f036600461489a565b61148a565b61026561040336600461487e565b611496565b600061041382611604565b90505b919050565b609c8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104a75780601f1061047c576101008083540402835291602001916104a7565b820191906000526020600020905b81548152906001019060200180831161048a57829003601f168201915b5050505050905090565b60006104bc82611815565b6104f75760405162461bcd60e51b815260040180806020018281038252602c81526020018061526b602c913960400191505060405180910390fd5b506000908152609a602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60606101c66000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156105c8576000848152602090819020604080518082019091529084015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1681830152825260019092019101610556565b505050509050919050565b60006105de82610ca0565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561064b5760405162461bcd60e51b815260040180806020018281038252602181526020018061531b6021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661066a611822565b73ffffffffffffffffffffffffffffffffffffffff161480610698575061069881610693611822565b611826565b6106d35760405162461bcd60e51b81526004018080602001828103825260388152602001806151416038913960400191505060405180910390fd5b6106dd8383611861565b505050565b60006106ee6098611901565b905090565b815160601c6000610702611822565b9050836040015160008151811061071557fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146107745760405162461bcd60e51b815260040161076b90614ddd565b60405180910390fd5b8360800151518460400151511461078a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806107c957506107c9828261148a565b6107e55760405162461bcd60e51b815260040161076b90614eb7565b60006107f08561190c565b905060005b8560400151518110156108805760008660400151828151811061081457fe5b60200260200101516000015190508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108775761087781848960800151858151811061086a57fe5b6020026020010151611b55565b506001016107f5565b5061088f848660000151611b60565b6108a185600001518660600151611b7e565b6108b385600001518660400151611dcc565b6108c585600001518660200151611fda565b5050505050565b6108dd6108d7611822565b8261203d565b6109185760405162461bcd60e51b815260040180806020018281038252603181526020018061533c6031913960400191505060405180910390fd5b6106dd838383612049565b60008281526101c66020526040812054819061094457506000905080610a54565b60008481526101c66020908152604080832080548251818502810185019093528083529192909190849084015b828210156109e3576000848152602090819020604080518082019091529084015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1681830152825260019092019101610971565b505050509050806000815181106109f657fe5b60209081029190910101515192506000805b8251811015610a4857828181518110610a1d57fe5b6020026020010151602001516bffffffffffffffffffffffff16820191508080600101915050610a08565b50612710908502049150505b9250929050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152609760205260408120610a8a90836121f0565b90505b92915050565b600054610100900460ff1680610aac5750610aac6121fc565b80610aba575060005460ff16155b610af55760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff16158015610b20576000805460ff1961ff0019909116610100171660011790555b610b2e87878787878761220d565b7f1c82072046345795ece476153b70942e74da1b15d7977faabb077e8cad76d8b2610b57611822565b8888604051610b6893929190614cd9565b60405180910390a18015610b82576000805461ff00191690555b50505050505050565b6106dd8383836040518060200160405280600081525061112a565b610baf81611815565b610c3857606081901c610bc0611822565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c295760405162461bcd60e51b815260040180806020018281038252602d81526020018061523e602d913960400191505060405180910390fd5b610c328261227f565b50610c87565b610c436108d7611822565b610c7e5760405162461bcd60e51b81526004018080602001828103825260308152602001806153926030913960400191505060405180910390fd5b610c878161229a565b50565b600080610c9860988461238a565b509392505050565b6000610413826040518060600160405280602981526020016151a360299139609891906123a6565b609f8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104a75780601f1061047c576101008083540402835291602001916104a7565b600073ffffffffffffffffffffffffffffffffffffffff8216610d7d5760405162461bcd60e51b815260040180806020018281038252602a815260200180615179602a913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260976020526040902061041390611901565b610db3611822565b73ffffffffffffffffffffffffffffffffffffffff16610dd1610f74565b73ffffffffffffffffffffffffffffffffffffffff1614610e39576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60335460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b8251610eb390611815565b15610ecc57610ec782828560000151610b8b565b6106dd565b6106dd83826106f3565b60008181526101c7602090815260408083208054825181850281018501909352808352606094929391929091840182156105c8576000848152602090819020604080518082019091529084015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1681830152825260019092019101610556565b60335473ffffffffffffffffffffffffffffffffffffffff1690565b609d8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104a75780601f1061047c576101008083540402835291602001916104a7565b610ff9611822565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611079576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b80609b6000611086611822565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556110d7611822565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b61113b611135611822565b8361203d565b6111765760405162461bcd60e51b815260040180806020018281038252603181526020018061533c6031913960400191505060405180910390fd5b611182848484846123bd565b50505050565b606061119382611815565b6111ce5760405162461bcd60e51b815260040180806020018281038252602f8152602001806152ec602f913960400191505060405180910390fd5b6000828152609e602090815260408083208054825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152929091908301828280156112615780601f1061123657610100808354040283529160200191611261565b820191906000526020600020905b81548152906001019060200180831161124457829003601f168201915b505050505090506000611272610cc8565b905080516000141561128657509050610416565b8151156112a057611297818361240f565b92505050610416565b806112aa8561269c565b6040516020018083805190602001908083835b602083106112fa57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016112bd565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b6020831061136057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611323565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050919050565b8173ffffffffffffffffffffffffffffffffffffffff166113bd611822565b73ffffffffffffffffffffffffffffffffffffffff16146113f05760405162461bcd60e51b815260040161076b90614e14565b6106dd8383836127ab565b6101fa805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156114825780601f1061145757610100808354040283529160200191611482565b820191906000526020600020905b81548152906001019060200180831161146557829003601f168201915b505050505081565b6000610a8a8383612896565b61149e611822565b73ffffffffffffffffffffffffffffffffffffffff166114bc610f74565b73ffffffffffffffffffffffffffffffffffffffff1614611524576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166115765760405162461bcd60e51b81526004018080602001828103825260268152602001806150836026913960400191505060405180910390fd5b60335460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f8486f69f00000000000000000000000000000000000000000000000000000000148061169757507fffffffff0000000000000000000000000000000000000000000000000000000082167fcad96cca00000000000000000000000000000000000000000000000000000000145b806116e357507fffffffff0000000000000000000000000000000000000000000000000000000082167f2a55205a00000000000000000000000000000000000000000000000000000000145b8061172f57507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b8061177b57507fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000145b806117c757507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806104135750507fffffffff00000000000000000000000000000000000000000000000000000000167f780e9d63000000000000000000000000000000000000000000000000000000001490565b60006104136098836128cf565b3390565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152609b6020908152604080832093909416825291909152205460ff1690565b6000818152609a6020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915581906118bb82610ca0565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610413826128db565b60008082606001515167ffffffffffffffff8111801561192b57600080fd5b50604051908082528060200260200182016040528015611955578160200160208202803683370190505b50905060005b8360600151518110156119a7576119888460600151828151811061197b57fe5b60200260200101516128df565b82828151811061199457fe5b602090810291909101015260010161195b565b50600083604001515167ffffffffffffffff811180156119c657600080fd5b506040519080825280602002602001820160405280156119f0578160200160208202803683370190505b50905060005b846040015151811015611a3557611a168560400151828151811061197b57fe5b828281518110611a2257fe5b60209081029190910101526001016119f6565b507ff64326045af5fd7e15297ba939f85b550474d3899daa47d2bc1ffbdb9ced344e84600001518560200151805190602001208360405160200180828051906020019060200280838360005b83811015611a99578181015183820152602001611a81565b50505050905001915050604051602081830303815290604052805190602001208560405160200180828051906020019060200280838360005b83811015611aea578181015183820152602001611ad2565b505050509050019150506040516020818303038152906040528051906020012060405160200180868152602001858152602001848152602001838152602001828152602001955050505050506040516020818303038152906040528051906020012092505050919050565b6106dd83838361295e565b611b7a828260405180602001604052806000815250612c42565b5050565b6000805b8251811015611d8157600073ffffffffffffffffffffffffffffffffffffffff16838281518110611baf57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415611c24576040805162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e740000000000604482015290519081900360640190fd5b828181518110611c3057fe5b6020026020010151602001516bffffffffffffffffffffffff1660001415611c9f576040805162461bcd60e51b815260206004820181905260248201527f526f79616c74792076616c75652073686f756c6420626520706f736974697665604482015290519081900360640190fd5b828181518110611cab57fe5b6020026020010151602001516bffffffffffffffffffffffff16820191506101c66000858152602001908152602001600020838281518110611ce957fe5b60209081029190910181015182546001818101855560009485529383902082519101805492909301516bffffffffffffffffffffffff16740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffffffffffffff0000000000000000000000000000000000000000909316929092171617905501611b82565b506127108110611dc25760405162461bcd60e51b815260040180806020018281038252602581526020018061536d6025913960400191505060405180910390fd5b6106dd8383612c94565b60008281526101c76020526040812090805b8351811015611f7957600073ffffffffffffffffffffffffffffffffffffffff16848281518110611e0b57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415611e4b5760405162461bcd60e51b815260040161076b90614e80565b838181518110611e5757fe5b6020026020010151602001516bffffffffffffffffffffffff1660001415611e915760405162461bcd60e51b815260040161076b90614da8565b82848281518110611e9e57fe5b602090810291909101810151825460018101845560009384529282902081519301805491909201516bffffffffffffffffffffffff16740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216919091179092169190911790558351611f6f90859083908110611f4657fe5b6020026020010151602001516bffffffffffffffffffffffff1683612cd190919063ffffffff16565b9150600101611dde565b508061271014611f9b5760405162461bcd60e51b815260040161076b90614f4b565b7f841ffb90d4cabdd1f16034f3fa831d79060febbb8167bdd54a49269365bdf78f8484604051611fcc929190614fb1565b60405180910390a150505050565b611fe382611815565b61201e5760405162461bcd60e51b815260040180806020018281038252602c815260200180615297602c913960400191505060405180910390fd5b6000828152609e6020908152604090912082516106dd92840190614523565b6000610a8a8383612d2b565b8273ffffffffffffffffffffffffffffffffffffffff1661206982610ca0565b73ffffffffffffffffffffffffffffffffffffffff16146120bb5760405162461bcd60e51b81526004018080602001828103825260298152602001806152c36029913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821661210d5760405162461bcd60e51b81526004018080602001828103825260248152602001806150a96024913960400191505060405180910390fd5b6121188383836106dd565b612123600082611861565b73ffffffffffffffffffffffffffffffffffffffff831660009081526097602052604090206121529082612d64565b5073ffffffffffffffffffffffffffffffffffffffff821660009081526097602052604090206121829082612d70565b5061218f60988284612d7c565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610a8a8383612d9f565b600061220730612e03565b15905090565b61221684612e09565b61221e612e1c565b612226612ebd565b61222e612e1c565b612236612f73565b61223e613029565b612246612e1c565b61224e613147565b61225783613248565b6122618686613328565b61226c82600161346e565b61227781600161346e565b505050505050565b600090815260a060205260409020805460ff19166001179055565b60006122a582610ca0565b90506122b3816000846106dd565b6122be600083611861565b6000828152609e602052604090205460026000196101006001841615020190911604156122fc576000828152609e602052604081206122fc916145af565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260976020526040902061232b9083612d64565b506123376098836134db565b506123418261227f565b604051829060009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600080808061239986866134e7565b9097909650945050505050565b60006123b3848484613562565b90505b9392505050565b6123c8848484612049565b6123d4848484846135ef565b6111825760405162461bcd60e51b81526004018080602001828103825260328152602001806150516032913960400191505060405180910390fd5b805182516060918491849110156125165784846040516020018083805190602001908083835b6020831061247257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612435565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106124d857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161249b565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050610a8d565b60005b82518110156126925782818151811061252e57fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191682828151811061256757fe5b01602001517fff00000000000000000000000000000000000000000000000000000000000000161461268a5785856040516020018083805190602001908083835b602083106125e557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016125a8565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b6020831061264b57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161260e565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529350505050610a8d565b600101612519565b5092949350505050565b6060816126dd575060408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152610416565b8160005b81156126f557600101600a820491506126e1565b60008167ffffffffffffffff8111801561270e57600080fd5b506040519080825280601f01601f191660200182016040528015612739576020820181803683370190505b50859350905060001982015b83156127a257600a840660300160f81b8282806001900393508151811061276857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a84049350612745565b50949350505050565b60008381526101c66020526040812054905b818110156108c55760008581526101c660205260409020805473ffffffffffffffffffffffffffffffffffffffff86169190839081106127f957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16141561288e5760008581526101c66020526040902080548491908390811061283f57fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790555b6001016127bd565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260c9602052604081205460ff1680610a8a5750610a8a8383611826565b6000610a8a8383613800565b5490565b8051602091820151604080517f397e04204c1e1a60ee8724b71f8244e10ab5f2e9009854d80f602bda21b59ebb8186015273ffffffffffffffffffffffffffffffffffffffff909316838201526bffffffffffffffffffffffff9091166060808401919091528151808403909101815260809092019052805191012090565b600061296983613818565b9050600082516041141561298457612981828461387f565b90505b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108c5576129d68573ffffffffffffffffffffffffffffffffffffffff16612e03565b15612bca57604080517f1626ba7e000000000000000000000000000000000000000000000000000000008082526004820185815260248301938452865160448401528651919373ffffffffffffffffffffffffffffffffffffffff8a1693631626ba7e9388938a9390929091606490910190602085019080838360005b83811015612a6b578181015183820152602001612a53565b50505050905090810190601f168015612a985780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015612ab657600080fd5b505afa158015612aca573d6000803e3d6000fd5b505050506040513d6020811015612ae057600080fd5b505160408051808201909152601c81527f7369676e617475726520766572696669636174696f6e206572726f72000000006020820152917fffffffff0000000000000000000000000000000000000000000000000000000090911614612bc45760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b89578181015183820152602001612b71565b50505050905090810190601f168015612bb65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506108c5565b604080518082018252601c81527f7369676e617475726520766572696669636174696f6e206572726f72000000006020808301918252925162461bcd60e51b81526004810193845282516024820152825192939283926044909201919080838360008315612b89578181015183820152602001612b71565b612c4c83836138ff565b612c5960008484846135ef565b6106dd5760405162461bcd60e51b81526004018080602001828103825260328152602001806150516032913960400191505060405180910390fd5b7f3fa96d7b6bcbfe71ef171666d84db3cf52fa2d1c8afdb1cc8e486177f208b7df8282604051612cc5929190614fb1565b60405180910390a15050565b600082820183811015610a8a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260c9602052604081205460ff1680610a8a5750610a8a8383613909565b6000610a8a83836139d9565b6000610a8a8383613a9f565b60006123b3848473ffffffffffffffffffffffffffffffffffffffff8516613ae9565b81546000908210612de15760405162461bcd60e51b815260040180806020018281038252602281526020018061502f6022913960400191505060405180910390fd5b826000018281548110612df057fe5b9060005260206000200154905092915050565b3b151590565b8051611b7a90609f906020840190614523565b600054610100900460ff1680612e355750612e356121fc565b80612e43575060005460ff16155b612e7e5760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff16158015612ea9576000805460ff1961ff0019909116610100171660011790555b8015610c87576000805461ff001916905550565b600054610100900460ff1680612ed65750612ed66121fc565b80612ee4575060005460ff16155b612f1f5760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff16158015612f4a576000805460ff1961ff0019909116610100171660011790555b612ea97fcad96cca00000000000000000000000000000000000000000000000000000000613b80565b600054610100900460ff1680612f8c5750612f8c6121fc565b80612f9a575060005460ff16155b612fd55760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff16158015613000576000805460ff1961ff0019909116610100171660011790555b612ea97f01ffc9a700000000000000000000000000000000000000000000000000000000613b80565b600054610100900460ff168061304257506130426121fc565b80613050575060005460ff16155b61308b5760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff161580156130b6576000805460ff1961ff0019909116610100171660011790555b60006130c0611822565b603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610c87576000805461ff001916905550565b600054610100900460ff168061316057506131606121fc565b8061316e575060005460ff16155b6131a95760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff161580156131d4576000805460ff1961ff0019909116610100171660011790555b612ea96040518060400160405280600781526020017f4d696e74373231000000000000000000000000000000000000000000000000008152506040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250613c34565b600054610100900460ff168061326157506132616121fc565b8061326f575060005460ff16155b6132aa5760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff161580156132d5576000805460ff1961ff0019909116610100171660011790555b81516132e9906101fa906020850190614523565b506133137fe8a3d48500000000000000000000000000000000000000000000000000000000613b80565b8015611b7a576000805461ff00191690555050565b600054610100900460ff168061334157506133416121fc565b8061334f575060005460ff16155b61338a5760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff161580156133b5576000805460ff1961ff0019909116610100171660011790555b82516133c890609c906020860190614523565b5081516133dc90609d906020850190614523565b506134067f80ac58cd00000000000000000000000000000000000000000000000000000000613b80565b61342f7f5b5e139f00000000000000000000000000000000000000000000000000000000613b80565b6134587f780e9d6300000000000000000000000000000000000000000000000000000000613b80565b80156106dd576000805461ff0019169055505050565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260c96020908152604091829020805460ff1916851515908117909155825190815291517f270dbb8ba4292910ae92862466486be25c355c837270a3d8824b36a8bc7c653b9281900390910190a25050565b6000610a8a8383613cf6565b81546000908190831061352b5760405162461bcd60e51b815260040180806020018281038252602281526020018061521c6022913960400191505060405180910390fd5b600084600001848154811061353c57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816135c05760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612b89578181015183820152602001612b71565b508460000160018203815481106135d357fe5b9060005260206000209060020201600101549150509392505050565b60006136108473ffffffffffffffffffffffffffffffffffffffff16612e03565b61361c575060016137f8565b60006137947f150b7a020000000000000000000000000000000000000000000000000000000061364a611822565b888787604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156136cb5781810151838201526020016136b3565b50505050905090810190601f1680156136f85780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518060600160405280603281526020016150516032913973ffffffffffffffffffffffffffffffffffffffff88169190613dca565b905060008180602001905160208110156137ad57600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014925050505b949350505050565b60009081526001919091016020526040902054151590565b6000613822613dd9565b8260405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b600081516041146138d7576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a6138f586828585613e14565b9695505050505050565b611b7a8282614077565b600061391482611815565b61394f5760405162461bcd60e51b815260040180806020018281038252602c815260200180615115602c913960400191505060405180910390fd5b600061395a83610ca0565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806139c957508373ffffffffffffffffffffffffffffffffffffffff166139b1846104b1565b73ffffffffffffffffffffffffffffffffffffffff16145b806137f857506137f88185611826565b60008181526001830160205260408120548015613a955783546000198083019190810190600090879083908110613a0c57fe5b9060005260206000200154905080876000018481548110613a2957fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080613a5957fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610a8d565b6000915050610a8d565b6000613aab8383613800565b613ae157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a8d565b506000610a8d565b600082815260018401602052604081205480613b4e5750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556123b6565b82856000016001830381548110613b6157fe5b90600052602060002090600202016001018190555060009150506123b6565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415613bf7576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152606560205260409020805460ff19166001179055565b600054610100900460ff1680613c4d5750613c4d6121fc565b80613c5b575060005460ff16155b613c965760405162461bcd60e51b815260040180806020018281038252602e8152602001806151cc602e913960400191505060405180910390fd5b600054610100900460ff16158015613cc1576000805460ff1961ff0019909116610100171660011790555b825160208085019190912083519184019190912061012e9190915561012f5580156106dd576000805461ff0019169055505050565b60008181526001830160205260408120548015613a955783546000198083019190810190600090879083908110613d2957fe5b9060005260206000209060020201905080876000018481548110613d4957fe5b600091825260208083208454600290930201918255600193840154918401919091558354825289830190526040902090840190558654879080613d8857fe5b6000828152602080822060026000199094019384020182815560019081018390559290935588815289820190925260408220919091559450610a8d9350505050565b60606123b38484600085614250565b60006106ee7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f613e076143d6565b613e0f6143dd565b6143e4565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115613e755760405162461bcd60e51b81526004018080602001828103825260228152602001806150cd6022913960400191505060405180910390fd5b6000601e8560ff161115613f4f576004850360ff16601b1480613e9e57506004850360ff16601c145b613ed95760405162461bcd60e51b81526004018080602001828103825260228152602001806151fa6022913960400191505060405180910390fd5b6001613ee487614453565b60048703868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613f3e573d6000803e3d6000fd5b505050602060405103519050614006565b8460ff16601b1480613f6457508460ff16601c145b613f9f5760405162461bcd60e51b81526004018080602001828103825260228152602001806151fa6022913960400191505060405180910390fd5b60018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613ff9573d6000803e3d6000fd5b5050506020604051035190505b73ffffffffffffffffffffffffffffffffffffffff811661406e576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff82166140aa5760405162461bcd60e51b815260040161076b90614e4b565b6140b3816144a4565b156140d05760405162461bcd60e51b815260040161076b90614f14565b6140d981611815565b156140f65760405162461bcd60e51b815260040161076b90614d71565b614102600083836106dd565b73ffffffffffffffffffffffffffffffffffffffff821660009081526097602052604090206141319082612d70565b5061413e60988284612d7c565b50606081901c73ffffffffffffffffffffffffffffffffffffffff8316811461420657604051829073ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46106dd565b604051829073ffffffffffffffffffffffffffffffffffffffff8516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b6060824710156142915760405162461bcd60e51b81526004018080602001828103825260268152602001806150ef6026913960400191505060405180910390fd5b61429a85612e03565b6142eb576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061435457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614317565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146143b6576040519150601f19603f3d011682016040523d82523d6000602084013e6143bb565b606091505b50915091506143cb8282866144b9565b979650505050505050565b61012e5490565b61012f5490565b60008383836143f161451f565b30604051602001808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b600090815260a0602052604090205460ff1690565b606083156144c85750816123b6565b8251156144d85782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315612b89578181015183820152602001612b71565b4690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282614559576000855561459f565b82601f1061457257805160ff191683800117855561459f565b8280016001018555821561459f579182015b8281111561459f578251825591602001919060010190614584565b506145ab9291506145ef565b5090565b50805460018160011615610100020316600290046000825580601f106145d55750610c87565b601f016020900490600052602060002090810190610c8791905b5b808211156145ab57600081556001016145f0565b80356104168161500c565b600082601f83011261461f578081fd5b8135602061463461462f83614fee565b614fca565b82815281810190858301855b8581101561466957614657898684358b0101614737565b84529284019290840190600101614640565b5090979650505050505050565b600082601f830112614686578081fd5b8135602061469661462f83614fee565b828152818101908583016040808602880185018910156146b4578687fd5b865b868110156147295781838b0312156146cc578788fd5b815182810181811067ffffffffffffffff821117156146e757fe5b835283356146f48161500c565b8152838701356bffffffffffffffffffffffff8116811461471357898afd5b81880152855293850193918101916001016146b6565b509198975050505050505050565b600082601f830112614747578081fd5b813567ffffffffffffffff81111561475b57fe5b61478c60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601614fca565b8181528460208386010111156147a0578283fd5b816020850160208301379081016020019190915292915050565b600060a082840312156147cb578081fd5b6147d560a0614fca565b905081358152602082013567ffffffffffffffff808211156147f657600080fd5b61480285838601614737565b6020840152604084013591508082111561481b57600080fd5b61482785838601614676565b6040840152606084013591508082111561484057600080fd5b61484c85838601614676565b6060840152608084013591508082111561486557600080fd5b506148728482850161460f565b60808301525092915050565b60006020828403121561488f578081fd5b8135610a8a8161500c565b600080604083850312156148ac578081fd5b82356148b78161500c565b915060208301356148c78161500c565b809150509250929050565b6000806000606084860312156148e6578081fd5b83356148f18161500c565b925060208401356149018161500c565b929592945050506040919091013590565b60008060008060808587031215614927578081fd5b84356149328161500c565b935060208501356149428161500c565b925060408501359150606085013567ffffffffffffffff811115614964578182fd5b61497087828801614737565b91505092959194509250565b6000806040838503121561498e578182fd5b82356149998161500c565b9150602083013580151581146148c7578182fd5b600080604083850312156149bf578182fd5b82356149ca8161500c565b946020939093013593505050565b6000602082840312156149e9578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a8a578182fd5b60008060008060008060c08789031215614a30578384fd5b863567ffffffffffffffff80821115614a47578586fd5b614a538a838b01614737565b97506020890135915080821115614a68578586fd5b614a748a838b01614737565b96506040890135915080821115614a89578586fd5b614a958a838b01614737565b95506060890135915080821115614aaa578384fd5b50614ab789828a01614737565b935050614ac660808801614604565b9150614ad460a08801614604565b90509295509295509295565b60008060408385031215614af2578182fd5b823567ffffffffffffffff811115614b08578283fd5b614b14858286016147ba565b92505060208301356148c78161500c565b600080600060608486031215614b39578081fd5b833567ffffffffffffffff811115614b4f578182fd5b614b5b868287016147ba565b9350506020840135614b6c8161500c565b91506040840135614b7c8161500c565b809150509250925092565b600060208284031215614b98578081fd5b5035919050565b600080600060608486031215614bb3578081fd5b833592506020840135614b6c8161500c565b60008060408385031215614bd7578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015614c44578151805173ffffffffffffffffffffffffffffffffffffffff1688528301516bffffffffffffffffffffffff168388015260409096019590820190600101614bf9565b509495945050505050565b60008151808452815b81811015614c7457602081850181015186830182015201614c58565b81811115614c855782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8516825260606020830152614d086060830185614c4f565b82810360408401526138f58185614c4f565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060208252610a8a6020830184614be6565b901515815260200190565b600060208252610a8a6020830184614c4f565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252818101527f43726561746f722073686172652073686f756c6420626520706f736974697665604082015260600190565b60208082526011908201527f746f6b656e496420696e636f7272656374000000000000000000000000000000604082015260600190565b6020808252600b908201527f6e6f7420616c6c6f776564000000000000000000000000000000000000000000604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b60208082526019908201527f4163636f756e742073686f756c642062652070726573656e7400000000000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606082015260800190565b60208082526014908201527f746f6b656e20616c7265616479206275726e6564000000000000000000000000604082015260600190565b6020808252602e908201527f746f74616c20616d6f756e74206f662063726561746f7273207368617265207360408201527f686f756c64206265203130303030000000000000000000000000000000000000606082015260800190565b90815260200190565b6000838252604060208301526123b36040830184614be6565b60405181810167ffffffffffffffff81118282101715614fe657fe5b604052919050565b600067ffffffffffffffff82111561500257fe5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff81168114610c8757600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734552433732313a207472616e7366657220746f20746865207a65726f206164647265737345434453413a20696e76616c6964207369676e6174757265202773272076616c7565416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445434453413a20696e76616c6964207369676e6174757265202776272076616c7565456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e65722c206e6f74206275726e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732314d657461646174613a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564526f79616c747920746f74616c2076616c75652073686f756c64206265203c2031303030304552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a26469706673582212204bbaddee1b0389793b003d2556fa7a907296bd57c25ea0f3b889201318a229b664736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 812,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 815,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1662,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 307,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 364,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15895,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_holderTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_struct(UintSet)2620_storage)"
      },
      {
        "astId": 15897,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_tokenOwners",
        "offset": 0,
        "slot": "152",
        "type": "t_struct(UintToAddressMap)1997_storage"
      },
      {
        "astId": 15901,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 15907,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 15909,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_name",
        "offset": 0,
        "slot": "156",
        "type": "t_string_storage"
      },
      {
        "astId": 15911,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_symbol",
        "offset": 0,
        "slot": "157",
        "type": "t_string_storage"
      },
      {
        "astId": 15915,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 15917,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_baseURI",
        "offset": 0,
        "slot": "159",
        "type": "t_string_storage"
      },
      {
        "astId": 15930,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_burnedTokens",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 16855,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "__gap",
        "offset": 0,
        "slot": "161",
        "type": "t_array(t_uint256)40_storage"
      },
      {
        "astId": 15182,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "defaultApprovals",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15253,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15172,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 138,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "302",
        "type": "t_bytes32"
      },
      {
        "astId": 140,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "303",
        "type": "t_bytes32"
      },
      {
        "astId": 289,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "__gap",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13850,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "__gap",
        "offset": 0,
        "slot": "354",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10234,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "__gap",
        "offset": 0,
        "slot": "404",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8975,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "royalties",
        "offset": 0,
        "slot": "454",
        "type": "t_mapping(t_uint256,t_array(t_struct(Part)8804_storage)dyn_storage)"
      },
      {
        "astId": 15298,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "creators",
        "offset": 0,
        "slot": "455",
        "type": "t_mapping(t_uint256,t_array(t_struct(Part)8804_storage)dyn_storage)"
      },
      {
        "astId": 15731,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "__gap",
        "offset": 0,
        "slot": "456",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10085,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "contractURI",
        "offset": 0,
        "slot": "506",
        "type": "t_string_storage"
      },
      {
        "astId": 10119,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "__gap",
        "offset": 0,
        "slot": "507",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15086,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "__gap",
        "offset": 0,
        "slot": "556",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15844,
        "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
        "label": "__gap",
        "offset": 0,
        "slot": "606",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(MapEntry)1671_storage)dyn_storage": {
        "base": "t_struct(MapEntry)1671_storage",
        "encoding": "dynamic_array",
        "label": "struct EnumerableMapUpgradeable.MapEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Part)8804_storage)dyn_storage": {
        "base": "t_struct(Part)8804_storage",
        "encoding": "dynamic_array",
        "label": "struct LibPart.Part[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)40_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[40]",
        "numberOfBytes": "1280"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(UintSet)2620_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2620_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Part)8804_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibPart.Part[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Part)8804_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Map)1679_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMapUpgradeable.Map",
        "members": [
          {
            "astId": 1674,
            "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
            "label": "_entries",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(MapEntry)1671_storage)dyn_storage"
          },
          {
            "astId": 1678,
            "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MapEntry)1671_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMapUpgradeable.MapEntry",
        "members": [
          {
            "astId": 1668,
            "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1670,
            "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
            "label": "_value",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Part)8804_storage": {
        "encoding": "inplace",
        "label": "struct LibPart.Part",
        "members": [
          {
            "astId": 8801,
            "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 8803,
            "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
            "label": "value",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)2234_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2229,
            "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2233,
            "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2620_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.UintSet",
        "members": [
          {
            "astId": 2619,
            "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2234_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToAddressMap)1997_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
        "members": [
          {
            "astId": 1996,
            "contract": "@sipher/tokens/contracts/erc-721/ERC721Sipher.sol:ERC721Sipher",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)1679_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}